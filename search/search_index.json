{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pvtpy","text":"<ul> <li>Documentation http://scuervo91.github.io/pvtpy</li> <li>Sorce Code https://github.com/scuervo91/pvtpy</li> </ul> <p>Python library to handle PVT for Oil &amp; Gas Processes. Includes some correlations to easily create tables from main fluids attributes</p> <ul> <li>PVT Tables: Oil, Gas &amp; Water tables with custom properties to interpolate</li> <li>Chromatography: Create Chromatrography object with Plus component.</li> <li>Correlations: Correlations to estimate PVT Tables from main Attributes</li> <li>Equation Of State: First Implementation of EOS to estimate Density (On dev) </li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.8+ </li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install pvtpy\n\n---&gt; 100%\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license</p>"},{"location":"realease_notes/","title":"Releases Notes","text":""},{"location":"realease_notes/#014","title":"0.1.4","text":""},{"location":"realease_notes/#fixes","title":"Fixes","text":"<ul> <li>dependencies issues</li> </ul>"},{"location":"realease_notes/#013","title":"0.1.3","text":""},{"location":"realease_notes/#fixes_1","title":"Fixes","text":"<ul> <li>Add Class methods to main classes.</li> <li>Fix to_ecl method of gas</li> </ul>"},{"location":"realease_notes/#012","title":"0.1.2","text":""},{"location":"realease_notes/#fixes_2","title":"Fixes","text":"<ul> <li>\ud83d\udc77 Fix bug when calculating Oil Pvt from correlations when Bubble pressure is provided</li> </ul>"},{"location":"realease_notes/#011","title":"0.1.1","text":""},{"location":"realease_notes/#fixes_3","title":"Fixes","text":"<ul> <li>\ud83d\udc77 Fix the chromatography methods with critical properties</li> </ul>"},{"location":"realease_notes/#010","title":"0.1.0","text":"<ul> <li>Initial release!</li> </ul>"},{"location":"examples/__init__/","title":"init","text":""},{"location":"examples/1-pvt/1a-PVT_Tables/","title":"PVT Object","text":"In\u00a0[3]: Copied! <pre>from pvtpy.pvt import PVT\nfrom pvtpy.units import Pressure\nimport numpy as np\nimport pandas as pd\n</pre> from pvtpy.pvt import PVT from pvtpy.units import Pressure import numpy as np import pandas as pd In\u00a0[4]: Copied! <pre>p = np.linspace(10,3500,15)\nrho = np.linspace(0.8,1.3,15)\ntt = np.linspace(90,130,15)\n</pre> p = np.linspace(10,3500,15) rho = np.linspace(0.8,1.3,15) tt = np.linspace(90,130,15) In\u00a0[5]: Copied! <pre>p\n</pre> p Out[5]: <pre>array([  10.        ,  259.28571429,  508.57142857,  757.85714286,\n       1007.14285714, 1256.42857143, 1505.71428571, 1755.        ,\n       2004.28571429, 2253.57142857, 2502.85714286, 2752.14285714,\n       3001.42857143, 3250.71428571, 3500.        ])</pre> <p>Create the PVT Object by providing a list of ordered pressure and corresponding properties in a dictionary form</p> In\u00a0[6]: Copied! <pre>pvt1 = PVT(pressure=Pressure(value=p.tolist()), fields={'rho':rho.tolist(),'temp':tt.tolist()})\n\nprint(type(pvt1))\n</pre> pvt1 = PVT(pressure=Pressure(value=p.tolist()), fields={'rho':rho.tolist(),'temp':tt.tolist()})  print(type(pvt1)) <pre>&lt;class 'pvtpy.pvt.pvt.PVT'&gt;\n</pre> <p>To export the pvt to a <code>pandas DataFrame</code> call the <code>df</code> method</p> In\u00a0[7]: Copied! <pre>print(pvt1.df())\n</pre> print(pvt1.df()) <pre>                  rho        temp\npressure                         \n10.000000    0.800000   90.000000\n259.285714   0.835714   92.857143\n508.571429   0.871429   95.714286\n757.857143   0.907143   98.571429\n1007.142857  0.942857  101.428571\n1256.428571  0.978571  104.285714\n1505.714286  1.014286  107.142857\n1755.000000  1.050000  110.000000\n2004.285714  1.085714  112.857143\n2253.571429  1.121429  115.714286\n2502.857143  1.157143  118.571429\n2752.142857  1.192857  121.428571\n3001.428571  1.228571  124.285714\n3250.714286  1.264286  127.142857\n3500.000000  1.300000  130.000000\n</pre> In\u00a0[8]: Copied! <pre>pvt1_r = PVT(pressure=Pressure(value=p.tolist()[::-1]), fields={'rho':rho.tolist()[::-1],'temp':tt.tolist()[::-1]})\n\nprint(pvt1_r.df())\n</pre> pvt1_r = PVT(pressure=Pressure(value=p.tolist()[::-1]), fields={'rho':rho.tolist()[::-1],'temp':tt.tolist()[::-1]})  print(pvt1_r.df()) <pre>                  rho        temp\npressure                         \n3500.000000  1.300000  130.000000\n3250.714286  1.264286  127.142857\n3001.428571  1.228571  124.285714\n2752.142857  1.192857  121.428571\n2502.857143  1.157143  118.571429\n2253.571429  1.121429  115.714286\n2004.285714  1.085714  112.857143\n1755.000000  1.050000  110.000000\n1505.714286  1.014286  107.142857\n1256.428571  0.978571  104.285714\n1007.142857  0.942857  101.428571\n757.857143   0.907143   98.571429\n508.571429   0.871429   95.714286\n259.285714   0.835714   92.857143\n10.000000    0.800000   90.000000\n</pre> In\u00a0[9]: Copied! <pre>try:\n    p_random = np.random.rand(15)\n    pvt_error = PVT(pressure=Pressure(value=p_random.tolist()), fields={'rho':rho.tolist(),'temp':tt.tolist()})\nexcept Exception as e:\n    print(e)\n    print('Pressure is not sorted. It raises an error')\n</pre> try:     p_random = np.random.rand(15)     pvt_error = PVT(pressure=Pressure(value=p_random.tolist()), fields={'rho':rho.tolist(),'temp':tt.tolist()}) except Exception as e:     print(e)     print('Pressure is not sorted. It raises an error') <pre>1 validation error for PVT\npressure\n  Pressure must be ordered (type=value_error)\nPressure is not sorted. It raises an error\n</pre> In\u00a0[10]: Copied! <pre>pvt1.interpolate([1500,2100])\n</pre> pvt1.interpolate([1500,2100]) Out[10]: rho temp pressure 1500 1.013467 107.077364 2100 1.099427 113.954155 In\u00a0[11]: Copied! <pre>pvt1.interpolate([1500,2100, 2500,2700],cols=['temp'])\n</pre> pvt1.interpolate([1500,2100, 2500,2700],cols=['temp']) Out[11]: temp pressure 1500 107.077364 2100 113.954155 2500 118.538682 2700 120.830946 In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/1-pvt/1a-PVT_Tables/#pvt-object","title":"PVT Object\u00b6","text":"<p>You can define a PVT object by providing a tabulated data indexed by pressure.</p>"},{"location":"examples/1-pvt/1a-PVT_Tables/#define-some-properties","title":"Define some properties\u00b6","text":""},{"location":"examples/1-pvt/1a-PVT_Tables/#the-pressure-must-be-ordered-either-descending-or-ascending","title":"The pressure must be ordered either descending or ascending\u00b6","text":"<p>By using the syntax <code>[::-1]</code> you can reverse the order of a list</p>"},{"location":"examples/1-pvt/1a-PVT_Tables/#interpolate-at-a-custom-pressure","title":"Interpolate at a custom Pressure\u00b6","text":""},{"location":"examples/1-pvt/1a-PVT_Tables/#interpolate-olly-certain-columns","title":"Interpolate olly certain columns\u00b6","text":""},{"location":"examples/1-pvt/1b_oil_correlations/","title":"Correlations for Oil","text":"In\u00a0[15]: Copied! <pre>import numpy as np\nimport pandas as pd\nimport pvtpy.black_oil as bk\nfrom pvtpy.units import Pressure, Temperature\n</pre> import numpy as np import pandas as pd import pvtpy.black_oil as bk from pvtpy.units import Pressure, Temperature In\u00a0[3]: Copied! <pre>rs1 = 675\np1 = Pressure(value=100, unit=\"psi\")\nt1 = Temperature(value=180, unit=\"farenheit\")\napi1 = 31\nsg = 0.95\n\nbk.pb(\n    rs = rs1,\n    temperature = t1,\n    sg_gas = sg,\n    api = api1,\n    method = [\"standing\",\"laster\",'glaso','vazquez_beggs'],\n    correction = True,\n    y_co2 = 0.2,\n    y_h2s = 0.1\n)\n</pre> rs1 = 675 p1 = Pressure(value=100, unit=\"psi\") t1 = Temperature(value=180, unit=\"farenheit\") api1 = 31 sg = 0.95  bk.pb(     rs = rs1,     temperature = t1,     sg_gas = sg,     api = api1,     method = [\"standing\",\"laster\",'glaso','vazquez_beggs'],     correction = True,     y_co2 = 0.2,     y_h2s = 0.1 ) Out[3]: pb_standing pb_laster pb_vazquez_beggs pb_glaso temp 180.0 2174.376878 2189.382402 2457.616402 2535.616843 In\u00a0[4]: Copied! <pre>bk.pb(\n    rs = rs1,\n    temperature = t1,\n    sg_gas = sg,\n    api = api1,\n    method = 'standing',\n    correction = True,\n    y_co2 = 0.2,\n    y_h2s = 0.1\n)\n</pre> bk.pb(     rs = rs1,     temperature = t1,     sg_gas = sg,     api = api1,     method = 'standing',     correction = True,     y_co2 = 0.2,     y_h2s = 0.1 ) Out[4]: pb temp 180.0 2174.376878 In\u00a0[5]: Copied! <pre>pb = Pressure(value=2500, unit=\"psi\")\nt2 = Temperature(value=180, unit=\"farenheit\")\napi2 = 31\nsg = 0.95\npressure = Pressure(value=[4000,2000], unit=\"psi\")\nrsb = 673\n\nbk.rs(\n    pressure = pressure,\n    pb = pb,\n    temperature = t2,\n    api = api2,\n    sg_gas = sg,\n    rsb = rsb,\n    method = 'standing'\n    \n)\n</pre> pb = Pressure(value=2500, unit=\"psi\") t2 = Temperature(value=180, unit=\"farenheit\") api2 = 31 sg = 0.95 pressure = Pressure(value=[4000,2000], unit=\"psi\") rsb = 673  bk.rs(     pressure = pressure,     pb = pb,     temperature = t2,     api = api2,     sg_gas = sg,     rsb = rsb,     method = 'standing'      ) Out[5]: rs pressure 4000.0 673.360022 2000.0 516.188402 In\u00a0[6]: Copied! <pre>bk.rs(\n    pressure = pressure,\n    pb = pb,\n    temperature = t2,\n    api = api2,\n    sg_gas = sg,\n    rsb = rsb,\n    method = ['standing','vazquez_beggs','laster','glaso','valarde']\n    \n)\n</pre> bk.rs(     pressure = pressure,     pb = pb,     temperature = t2,     api = api2,     sg_gas = sg,     rsb = rsb,     method = ['standing','vazquez_beggs','laster','glaso','valarde']      ) Out[6]: rs_standing rs_laster rs_vazquez_begss rs_glaso rs_valarde pressure 4000.0 673.360022 664.351906 582.336413 559.536021 673.000000 2000.0 516.188402 472.933506 446.829422 432.632499 571.883767 In\u00a0[7]: Copied! <pre>pressure4 = Pressure(value=4500, unit=\"psi\")\npb4 = Pressure(value=2500, unit=\"psi\")\ntemperature4 = Temperature(value=180, unit=\"farenheit\")\napi4 = 31\nsg4 = 0.95\nrs4 = 582\n\nbk.co(\n    pressure = pressure4,\n    rs = rs4,\n    pb = pb4,\n    temperature=temperature4,\n    sg_gas = sg4,\n    api = api4\n)\n</pre> pressure4 = Pressure(value=4500, unit=\"psi\") pb4 = Pressure(value=2500, unit=\"psi\") temperature4 = Temperature(value=180, unit=\"farenheit\") api4 = 31 sg4 = 0.95 rs4 = 582  bk.co(     pressure = pressure4,     rs = rs4,     pb = pb4,     temperature=temperature4,     sg_gas = sg4,     api = api4 ) Out[7]: co pressure 4500.0 0.000009 In\u00a0[8]: Copied! <pre>pressure3 = Pressure(value=[2000,2500,3000,3500], unit=\"psi\")\npb3 = Pressure(value=2500, unit=\"psi\")\ntemperature3 = Temperature(value=180, unit=\"farenheit\")\napi3 = 31\nsg3 = 0.95\nco = 9.61e-6\nrs3 = [516,673,673,673]\n\nco = bk.co(\n    pressure = pressure3,\n    rs = rs3,\n    pb = pb3,\n    temperature=temperature3,\n    sg_gas = sg3,\n    api = api3\n)\n\nprint(co)\nbk.bo(\n    pressure = pressure3,\n    rs = rs3,\n    pb = pb3,\n    temperature = temperature3,\n    api = api3,\n    sg_gas = sg3,\n    co = co['co'].values,\n    method = 'standing'\n).plot()\n</pre> pressure3 = Pressure(value=[2000,2500,3000,3500], unit=\"psi\") pb3 = Pressure(value=2500, unit=\"psi\") temperature3 = Temperature(value=180, unit=\"farenheit\") api3 = 31 sg3 = 0.95 co = 9.61e-6 rs3 = [516,673,673,673]  co = bk.co(     pressure = pressure3,     rs = rs3,     pb = pb3,     temperature=temperature3,     sg_gas = sg3,     api = api3 )  print(co) bk.bo(     pressure = pressure3,     rs = rs3,     pb = pb3,     temperature = temperature3,     api = api3,     sg_gas = sg3,     co = co['co'].values,     method = 'standing' ).plot() <pre>                co\npressure          \n2000.0    0.000027\n2500.0    0.000017\n3000.0    0.000014\n3500.0    0.000012\n</pre> Out[8]: <pre>&lt;AxesSubplot:xlabel='pressure'&gt;</pre> In\u00a0[9]: Copied! <pre>bk.bo(\n    pressure = pressure3,\n    rs = rs3,\n    pb = pb3,\n    temperature = temperature3,\n    api = api3,\n    sg_gas = sg3,\n    co = co['co'].values,\n    method = ['standing','vazquez_beggs','glaso']\n)\n</pre> bk.bo(     pressure = pressure3,     rs = rs3,     pb = pb3,     temperature = temperature3,     api = api3,     sg_gas = sg3,     co = co['co'].values,     method = ['standing','vazquez_beggs','glaso'] ) Out[9]: bo_standing bo_vazquez_beggs bo_glaso pressure 2000.0 1.321735 1.286747 1.298191 2500.0 1.412629 1.360888 1.390969 3000.0 1.402546 1.351175 1.381040 3500.0 1.395388 1.344279 1.373992 In\u00a0[10]: Copied! <pre>temperature5 = Temperature(value=[180,250], unit=\"farenheit\")\napi5 = 31\n\nbk.muod(\n    temperature = temperature5,\n    api = api5,\n    method = 'beal'\n)\n</pre> temperature5 = Temperature(value=[180,250], unit=\"farenheit\") api5 = 31  bk.muod(     temperature = temperature5,     api = api5,     method = 'beal' ) Out[10]: muod temp 180.0 2.654527 250.0 1.140414 In\u00a0[11]: Copied! <pre>bk.muod(\n    temperature = temperature5,\n    api = api5,\n    method = ['beal','beggs','glaso']\n)\n</pre> bk.muod(     temperature = temperature5,     api = api5,     method = ['beal','beggs','glaso'] ) Out[11]: muod_beal muod_beggs muod_glaso temp 180.0 2.654527 3.035358 2.758240 250.0 1.140414 1.591139 1.602075 In\u00a0[12]: Copied! <pre>pressure6 = Pressure(value=[4500,3000,2500,2000,1500], unit=\"psi\")\nrs6 = [673,673,673,516,415]\npb6 = Pressure(value=2500, unit=\"psi\")\nrsb6 = 673\ntemperature6 = Temperature(value=180, unit=\"farenheit\")\napi6 = 31\n\nbk.muo(\n    pressure = pressure6,\n    rs = rs6,\n    pb = pb6,\n    rsb = rsb6,\n    temperature = temperature6,\n    api = api6\n)\n</pre> pressure6 = Pressure(value=[4500,3000,2500,2000,1500], unit=\"psi\") rs6 = [673,673,673,516,415] pb6 = Pressure(value=2500, unit=\"psi\") rsb6 = 673 temperature6 = Temperature(value=180, unit=\"farenheit\") api6 = 31  bk.muo(     pressure = pressure6,     rs = rs6,     pb = pb6,     rsb = rsb6,     temperature = temperature6,     api = api6 ) Out[12]: muo pressure 4500.0 0.753756 3000.0 0.634152 2500.0 0.604104 2000.0 0.707262 1500.0 0.802196 In\u00a0[13]: Copied! <pre>pressure7 = Pressure(value=[4500,3000,2500,2000,1500], unit=\"psi\")\nrs7 = [673,673,673,516,415]\npb7 = Pressure(value=2500, unit=\"psi\")\nrsb7 = 673\nbob = 1.3\ntemperature7 = Temperature(value=180, unit=\"farenheit\")\napi7 = 31\nsg7 = 0.95\n\n\nco = bk.co(\n    pressure = pressure7,\n    rs = rs7,\n    pb = pb7,\n    temperature=temperature7,\n    sg_gas = sg7,\n    api = api7\n)\nprint(co)\n\nbo = bk.bo(\n    pressure = pressure7,\n    rs = rs7,\n    pb = pb7,\n    temperature = temperature7,\n    api = api7,\n    sg_gas = sg7,\n    co = co['co'].values,\n    method = 'standing'\n)\n\n\n\nbk.rho_oil(\n    pressure = pressure7,\n    co = co['co'].values,\n    bo = bo['bo'].values,\n    bob = bo.loc[2500,'bo'],\n    rs = rs7,\n    rsb = 673,\n    api = api7,\n    pb = pb7\n).plot()\n</pre> pressure7 = Pressure(value=[4500,3000,2500,2000,1500], unit=\"psi\") rs7 = [673,673,673,516,415] pb7 = Pressure(value=2500, unit=\"psi\") rsb7 = 673 bob = 1.3 temperature7 = Temperature(value=180, unit=\"farenheit\") api7 = 31 sg7 = 0.95   co = bk.co(     pressure = pressure7,     rs = rs7,     pb = pb7,     temperature=temperature7,     sg_gas = sg7,     api = api7 ) print(co)  bo = bk.bo(     pressure = pressure7,     rs = rs7,     pb = pb7,     temperature = temperature7,     api = api7,     sg_gas = sg7,     co = co['co'].values,     method = 'standing' )    bk.rho_oil(     pressure = pressure7,     co = co['co'].values,     bo = bo['bo'].values,     bob = bo.loc[2500,'bo'],     rs = rs7,     rsb = 673,     api = api7,     pb = pb7 ).plot() <pre>                co\npressure          \n4500.0    0.000010\n3000.0    0.000014\n2500.0    0.000017\n2000.0    0.000027\n1500.0    0.000041\n</pre> Out[13]: <pre>&lt;AxesSubplot:xlabel='pressure'&gt;</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/1-pvt/1b_oil_correlations/#correlations-for-oil","title":"Correlations for Oil\u00b6","text":""},{"location":"examples/1-pvt/1b_oil_correlations/#bubble-point","title":"Bubble Point\u00b6","text":""},{"location":"examples/1-pvt/1b_oil_correlations/#rs","title":"Rs\u00b6","text":""},{"location":"examples/1-pvt/1b_oil_correlations/#co","title":"co\u00b6","text":""},{"location":"examples/1-pvt/1b_oil_correlations/#bo","title":"Bo\u00b6","text":""},{"location":"examples/1-pvt/1b_oil_correlations/#muod","title":"Muod\u00b6","text":""},{"location":"examples/1-pvt/1b_oil_correlations/#muo","title":"Muo\u00b6","text":""},{"location":"examples/1-pvt/1b_oil_correlations/#rho","title":"Rho\u00b6","text":""},{"location":"examples/1-pvt/1c_water_correlations/","title":"Water Correlations","text":"In\u00a0[1]: Copied! <pre>import numpy as np\nimport pandas as pd\nimport pvtpy.black_oil as bk\nfrom pvtpy.units import Pressure, Temperature\n</pre> import numpy as np import pandas as pd import pvtpy.black_oil as bk from pvtpy.units import Pressure, Temperature In\u00a0[2]: Copied! <pre>p1 = Pressure(value=2500, unit=\"psi\")\nt1 = Temperature(value=100, unit=\"farenheit\")\nsalinity1 = 13500\n\nbk.rsw(\n    pressure=p1,\n    temperature=t1,\n    salinity=salinity1,\n    method=\"culberson\"\n)\n</pre> p1 = Pressure(value=2500, unit=\"psi\") t1 = Temperature(value=100, unit=\"farenheit\") salinity1 = 13500  bk.rsw(     pressure=p1,     temperature=t1,     salinity=salinity1,     method=\"culberson\" ) Out[2]: rsw pressure 2500.0 14.700224 In\u00a0[3]: Copied! <pre>bk.rsw(\n    pressure=p1,\n    temperature=t1,\n    salinity=salinity1,\n    method=[\"culberson\",'mccoy']\n)\n</pre> bk.rsw(     pressure=p1,     temperature=t1,     salinity=salinity1,     method=[\"culberson\",'mccoy'] ) Out[3]: rws_culberson rsw_mccoy pressure 2500.0 14.700224 14.505023 In\u00a0[4]: Copied! <pre>p1 = Pressure(value=2500, unit=\"psi\")\nt1 = Temperature(value=100, unit=\"farenheit\")\nsalinity1 = 13500\ncw = 1e-8\npb = Pressure(value=14.7, unit=\"psi\")\n\nbk.bw(\n    pressure=p1,\n    temperature=t1,\n    pb=pb,\n    cw=cw,\n    salinity=salinity1,\n    method='mccain'\n)\n</pre> p1 = Pressure(value=2500, unit=\"psi\") t1 = Temperature(value=100, unit=\"farenheit\") salinity1 = 13500 cw = 1e-8 pb = Pressure(value=14.7, unit=\"psi\")  bk.bw(     pressure=p1,     temperature=t1,     pb=pb,     cw=cw,     salinity=salinity1,     method='mccain' ) Out[4]: bw pressure 2500.0 1.009191 In\u00a0[5]: Copied! <pre>bk.bw(\n    pressure=p1,\n    temperature=t1,\n    pb=pb,\n    cw=cw,\n    salinity=salinity1,\n    method=['mccain','mccoy']\n)\n</pre> bk.bw(     pressure=p1,     temperature=t1,     pb=pb,     cw=cw,     salinity=salinity1,     method=['mccain','mccoy'] ) Out[5]: bw_mccain bw_mccoy pressure 2500.0 1.009191 1.000351 In\u00a0[6]: Copied! <pre>p1 = Pressure(value=2500, unit=\"psi\")\nt1 = Temperature(value=100, unit=\"farenheit\")\nsalinity1 = 13500\ncw = 1e-8\npb = Pressure(value=14.7, unit=\"psi\")\n\nbk.cw(\n    pressure=p1,\n    temperature=t1,\n    rsw=14.7,\n    salinity=salinity1,\n    method='standing'\n)\n</pre> p1 = Pressure(value=2500, unit=\"psi\") t1 = Temperature(value=100, unit=\"farenheit\") salinity1 = 13500 cw = 1e-8 pb = Pressure(value=14.7, unit=\"psi\")  bk.cw(     pressure=p1,     temperature=t1,     rsw=14.7,     salinity=salinity1,     method='standing' ) Out[6]: cw pressure 2500.0 0.000003 In\u00a0[7]: Copied! <pre>bk.cw(\n    pressure=p1,\n    temperature=t1,\n    rsw=14.7,\n    salinity=salinity1,\n    method=['standing','osif']\n)\n</pre> bk.cw(     pressure=p1,     temperature=t1,     rsw=14.7,     salinity=salinity1,     method=['standing','osif'] ) Out[7]: cw_standing cw_osif pressure 2500.0 0.000003 0.000003 In\u00a0[8]: Copied! <pre>p1 = Pressure(value=2500, unit=\"psi\")\nt1 = Temperature(value=100, unit=\"farenheit\")\nsalinity1 = 13500\ncw = 1e-8\npb = Pressure(value=14.7, unit=\"psi\")\n\nbk.muw(\n    pressure=p1,\n    temperature=t1,\n    salinity=salinity1,\n    method='van_wingen'\n)\n</pre> p1 = Pressure(value=2500, unit=\"psi\") t1 = Temperature(value=100, unit=\"farenheit\") salinity1 = 13500 cw = 1e-8 pb = Pressure(value=14.7, unit=\"psi\")  bk.muw(     pressure=p1,     temperature=t1,     salinity=salinity1,     method='van_wingen' ) Out[8]: muw pressure 2500.0 0.757448 In\u00a0[9]: Copied! <pre>bk.muw(\n    pressure=p1,\n    temperature=t1,\n    salinity=salinity1,\n    method=['van_wingen','russel','meehan','brill_beggs']\n    )\n</pre> bk.muw(     pressure=p1,     temperature=t1,     salinity=salinity1,     method=['van_wingen','russel','meehan','brill_beggs']     ) Out[9]: muw_van_wingen muw_russel muw_meehan muw_brill_beggs pressure 2500.0 0.757448 0.675647 0.739767 0.757448 In\u00a0[10]: Copied! <pre>p1 = Pressure(value=2500, unit=\"psi\")\nt1 = Temperature(value=100, unit=\"farenheit\")\nsalinity1 = 13500\ncw = 1e-8\npb = Pressure(value=14.7, unit=\"psi\")\n\nbk.rhow(\n    pressure=p1,\n    salinity=salinity1,\n    bw = 1.009,\n    method='banzer'\n)\n</pre> p1 = Pressure(value=2500, unit=\"psi\") t1 = Temperature(value=100, unit=\"farenheit\") salinity1 = 13500 cw = 1e-8 pb = Pressure(value=14.7, unit=\"psi\")  bk.rhow(     pressure=p1,     salinity=salinity1,     bw = 1.009,     method='banzer' ) Out[10]: rhow pressure 2500.0 62.423655 In\u00a0[11]: Copied! <pre>bk.rhow(\n    pressure=p1,\n    salinity=salinity1,\n    bw = 1.009,\n    method=['banzer','mccain']\n)\n</pre> bk.rhow(     pressure=p1,     salinity=salinity1,     bw = 1.009,     method=['banzer','mccain'] ) Out[11]: rhow_banzer rhow_mccain pressure 2500.0 62.423655 62.963031"},{"location":"examples/1-pvt/1c_water_correlations/#water-correlations","title":"Water Correlations\u00b6","text":""},{"location":"examples/1-pvt/1c_water_correlations/#bw","title":"Bw\u00b6","text":""},{"location":"examples/1-pvt/1c_water_correlations/#bw","title":"bw\u00b6","text":""},{"location":"examples/1-pvt/1c_water_correlations/#cw","title":"Cw\u00b6","text":""},{"location":"examples/1-pvt/1c_water_correlations/#muw","title":"Muw\u00b6","text":""},{"location":"examples/1-pvt/1c_water_correlations/#rhow","title":"Rhow\u00b6","text":""},{"location":"examples/1-pvt/1d_gas_correlations/","title":"Gas Correlations","text":"In\u00a0[2]: Copied! <pre>import numpy as np\nimport pandas as pd\nimport pvtpy.black_oil as bk\nfrom pvtpy.units import Pressure, Temperature\nfrom pvtpy.compositional import Chromatography\n</pre> import numpy as np import pandas as pd import pvtpy.black_oil as bk from pvtpy.units import Pressure, Temperature from pvtpy.compositional import Chromatography In\u00a0[3]: Copied! <pre>p1 = Pressure(value=2500, unit=\"psi\")\nt1 = Temperature(value=100, unit=\"farenheit\")\nma1 = 19.0\nz1 = 0.94\n\nbk.rhog(\n    pressure=p1,\n    ma = ma1,\n    z = z1,\n    temperature=t1,\n    method=\"ideal_gas\"\n)\n</pre> p1 = Pressure(value=2500, unit=\"psi\") t1 = Temperature(value=100, unit=\"farenheit\") ma1 = 19.0 z1 = 0.94  bk.rhog(     pressure=p1,     ma = ma1,     z = z1,     temperature=t1,     method=\"ideal_gas\" ) Out[3]: rhog pressure 2500.0 7.909734 In\u00a0[4]: Copied! <pre>bk.rhog(\n    pressure=p1,\n    ma = ma1,\n    z = z1,\n    temperature=t1,\n    method=[\"ideal_gas\",'real_gas']\n)\n</pre> bk.rhog(     pressure=p1,     ma = ma1,     z = z1,     temperature=t1,     method=[\"ideal_gas\",'real_gas'] ) Out[4]: real_gas ideal_gas pressure 2500.0 8.41461 7.909734 In\u00a0[5]: Copied! <pre>composition_dict = {\n    'mole_fraction':[0.0194,0.004,0.9598,0.0023,0.0057,0.0062,0.0006,0.0003,0.0001,0.0005,0.001,0.0001],\n    'compound':['carbon-dioxide','nitrogen','methane','ethane','propane','isobutane','n-butane','isopentane','n-pentane','n-hexane','n-heptane','n-octane']\n}\nchr = Chromatography()\nchr.from_df(pd.DataFrame(composition_dict), name='compound', mole_fraction='mole_fraction')\n\ncp = chr.get_pseudo_critical_properties()\ncp\n</pre> composition_dict = {     'mole_fraction':[0.0194,0.004,0.9598,0.0023,0.0057,0.0062,0.0006,0.0003,0.0001,0.0005,0.001,0.0001],     'compound':['carbon-dioxide','nitrogen','methane','ethane','propane','isobutane','n-butane','isopentane','n-pentane','n-hexane','n-heptane','n-octane'] } chr = Chromatography() chr.from_df(pd.DataFrame(composition_dict), name='compound', mole_fraction='mole_fraction')  cp = chr.get_pseudo_critical_properties() cp    Out[5]: <pre>CriticalProperties(critical_pressure=Pressure(value=669.360149972895, unit=&lt;PressureUnits.psi: 'psi'&gt;), critical_temperature=Temperature(value=349.14373275221504, unit=&lt;TemperatureUnits.farenheit: 'farenheit'&gt;))</pre> In\u00a0[16]: Copied! <pre>chr.df()\n</pre> chr.df() Out[16]: acentric_factor cas critical_pressure critical_temperature formula id iupac iupac_key mole_fraction molecular_weight peng_robinson redlich_kwong soave_redlich_kwong van_der_walls carbon-dioxide 0.2276 124-38-9 1071.0 87.91 CO2 50.0 1S/CO2/c2-1-3 CURLTUGMZLYLDI-UHFFFAOYSA-N 0.019414 44.0100 {} {} {} {} nitrogen 0.0403 7727-37-9 493.1 -232.51 N2 56.0 1S/N2/c1-2 IJGRMHOSHXDMSA-UHFFFAOYSA-N 0.004003 28.0134 {} {} {} {} methane 0.0115 74-82-8 666.4 -116.67 CH4 1.0 1S/CH4/h1H4 VNWKTOKETHGBQD-UHFFFAOYSA-N 0.960472 16.0425 {} {} {} {} ethane 0.0995 74-84-0 706.5 89.92 C2H6 2.0 1S/C2H6/c1-2/h1-2H3 OTMSDBZUPAUEDD-UHFFFAOYSA-N 0.002302 30.0700 {} {} {} {} propane 0.1523 74-98-6 616.0 206.06 C3H8 3.0 1S/C3H8/c1-3-2/h3H2;1-2H3 ATUOYWHBWRKTHZ-UHFFFAOYSA-N 0.005704 44.0970 {} {} {} {} isobutane 0.1770 75-28-5 527.9 274.46 C4H10 4.0 1S/C4H10/c1-4(2)3/h4H;1-3H3 NNPPMTNAJDCUHE-UHFFFAOYSA-N 0.006204 58.1230 {} {} {} {} isopentane 0.2275 78-78-4 490.4 369.10 C5H12 6.0 1S/C5H12/c1-4-5(2)3/h5H;4H2;1-3H3 QWTDNUCVQCZILF-UHFFFAOYSA-N 0.000300 72.1500 {} {} {} {} n-hexane 0.3013 110-54-3 436.9 453.60 C6H14 9.0 1S/C6H14/c1-3-5-6-4-2/h3-6H2;1-2H3 VLKZOEOYAKHREP-UHFFFAOYSA-N 0.000500 86.1770 {} {} {} {} n-heptane 0.3495 142-82-5 396.8 512.70 C7H16 14.0 1S/C7H16/c1-3-5-7-6-4-2/h3-7H2;1-2H3 IMNFDUFMRHMDMM-UHFFFAOYSA-N 0.001001 100.2040 {} {} {} {} n-octane 0.3996 111-65-9 360.7 564.22 C8H18 22.0 1S/C8H18/c1-3-5-7-8-6-4-2/h3-8H2;1-2H3 TVMXDCGIABBOFY-UHFFFAOYSA-N 0.000100 114.2310 {} {} {} {} In\u00a0[6]: Copied! <pre>p1 = Pressure(value=3500, unit=\"psi\")\nt1 = Temperature(value=160, unit=\"farenheit\")\n\nz = bk.z_factor(\n    pressure=p1,\n    temperature=t1,\n    critical_properties=cp,\n    method='papay'\n)\nz\n</pre> p1 = Pressure(value=3500, unit=\"psi\") t1 = Temperature(value=160, unit=\"farenheit\")  z = bk.z_factor(     pressure=p1,     temperature=t1,     critical_properties=cp,     method='papay' ) z Out[6]: z pressure 3500.0 -0.482622 In\u00a0[7]: Copied! <pre>ma = chr.apparent_molecular_weight()\n</pre> ma = chr.apparent_molecular_weight() In\u00a0[8]: Copied! <pre>bk.rhog(\n    pressure=p1,\n    ma = ma,\n    z = z['z'].values,\n    temperature=t1,\n    method=[\"ideal_gas\",'real_gas']\n)\n</pre> bk.rhog(     pressure=p1,     ma = ma,     z = z['z'].values,     temperature=t1,     method=[\"ideal_gas\",'real_gas'] ) Out[8]: real_gas ideal_gas pressure 3500.0 -18.795548 9.071146 In\u00a0[9]: Copied! <pre>bk.bg(\n    pressure=p1,\n    temperature=t1,\n    z = z['z'].values,\n    unit=['bblscf','ft3scf']\n)\n</pre> bk.bg(     pressure=p1,     temperature=t1,     z = z['z'].values,     unit=['bblscf','ft3scf'] ) Out[9]: bg_ft3/scf bg_bbl/scf pressure 3500.0 -0.002416 -0.00043 In\u00a0[10]: Copied! <pre>bk.eg(\n    pressure=p1,\n    temperature=t1,\n    z = z['z'].values,\n    unit=['scfft3','scfbbl']\n)\n</pre> bk.eg(     pressure=p1,     temperature=t1,     z = z['z'].values,     unit=['scfft3','scfbbl'] ) Out[10]: eg_scf/ft3 eg_scf bbl pressure 3500.0 -413.938167 -2324.232965 In\u00a0[11]: Copied! <pre>cp1=bk.critical_properties(\n    sg = 0.7\n)\ncp1\n</pre> cp1=bk.critical_properties(     sg = 0.7 ) cp1 Out[11]: <pre>CriticalProperties(critical_pressure=Pressure(value=669.125, unit=&lt;PressureUnits.psi: 'psi'&gt;), critical_temperature=Temperature(value=389.375, unit=&lt;TemperatureUnits.rankine: 'rankine'&gt;))</pre> In\u00a0[12]: Copied! <pre>cp_cor = bk.critical_properties_correction(\n    critical_properties=cp1,\n    h2s=0.1,\n    co2=0.05,\n    n2=0.0,\n    method = 'wichert_aziz'\n)\ncp_cor\n</pre> cp_cor = bk.critical_properties_correction(     critical_properties=cp1,     h2s=0.1,     co2=0.05,     n2=0.0,     method = 'wichert_aziz' ) cp_cor Out[12]: <pre>CriticalProperties(critical_pressure=Pressure(value=630.470283298732, unit=&lt;PressureUnits.psi: 'psi'&gt;), critical_temperature=Temperature(value=-91.0304426723273, unit=&lt;TemperatureUnits.farenheit: 'farenheit'&gt;))</pre> In\u00a0[15]: Copied! <pre>z = bk.z_factor(\n    pressure=Pressure(value=np.linspace(100,4000,15), unit=\"psi\"),\n    temperature=Temperature(value=160, unit=\"farenheit\"),\n    critical_properties=cp_cor,\n    method='papay'\n)\nz.plot()\n</pre> z = bk.z_factor(     pressure=Pressure(value=np.linspace(100,4000,15), unit=\"psi\"),     temperature=Temperature(value=160, unit=\"farenheit\"),     critical_properties=cp_cor,     method='papay' ) z.plot() Out[15]: <pre>&lt;AxesSubplot:xlabel='pressure'&gt;</pre> In\u00a0[\u00a0]: Copied! <pre>bk.mug(\n    pressure=p1,\n    temperature=t1,\n    rhog=10,\n    ma = 17,\n    method='lee_gonzalez'\n)\n</pre> bk.mug(     pressure=p1,     temperature=t1,     rhog=10,     ma = 17,     method='lee_gonzalez' ) In\u00a0[\u00a0]: Copied! <pre>bk.cg(pressure=p1)\n</pre> bk.cg(pressure=p1)"},{"location":"examples/1-pvt/1d_gas_correlations/#gas-correlations","title":"Gas Correlations\u00b6","text":""},{"location":"examples/1-pvt/1d_gas_correlations/#rhog","title":"Rhog\u00b6","text":""},{"location":"examples/1-pvt/1d_gas_correlations/#z","title":"Z\u00b6","text":""},{"location":"examples/2-Fluids/2a_Oil/","title":"Oil Model","text":"In\u00a0[7]: Copied! <pre>from pvtpy.pvt import PVT\nimport pvtpy.black_oil as bk\nfrom pvtpy.fluids import Oil, InitialConditions\nfrom pvtpy.units import Pressure, Temperature\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n</pre> from pvtpy.pvt import PVT import pvtpy.black_oil as bk from pvtpy.fluids import Oil, InitialConditions from pvtpy.units import Pressure, Temperature import numpy as np import pandas as pd import seaborn as sns In\u00a0[8]: Copied! <pre>init = InitialConditions(pressure=Pressure(value=3600), temperature=Temperature(value=160))\ninit\n</pre> init = InitialConditions(pressure=Pressure(value=3600), temperature=Temperature(value=160)) init Out[8]: <pre>InitialConditions(pressure=Pressure(value=3600.0, unit=&lt;PressureUnits.psi: 'psi'&gt;), temperature=Temperature(value=160.0, unit=&lt;TemperatureUnits.farenheit: 'farenheit'&gt;))</pre> In\u00a0[9]: Copied! <pre>cor = bk.SetOilCorrelations()\ncor\n</pre> cor = bk.SetOilCorrelations() cor Out[9]: <pre>SetOilCorrelations(pb=&lt;pb_correlations.standing: 'standing'&gt;, rs=&lt;rs_correlations.standing: 'standing'&gt;, bo=&lt;bo_correlations.standing: 'standing'&gt;, co_above=&lt;co_above_correlations.vazquez_beggs: 'vazquez_beggs'&gt;, co_below=&lt;co_below_correlations.mccain: 'mccain'&gt;, muod=&lt;muod_correlations.beal: 'beal'&gt;, muo_above=&lt;muo_above_correlations.beal: 'beal'&gt;, muo_below=&lt;muo_below_correlations.beggs: 'beggs'&gt;, rho=&lt;rho_correlations.banzer: 'banzer'&gt;)</pre> In\u00a0[10]: Copied! <pre>oil1 = Oil.pvt_from_correlation(\n    initial_conditions=init,\n    api = 31,\n    rsb = 675,\n    sg_gas = 0.95,\n    correlations=cor\n)\nprint(oil1.pvt.df())\n</pre> oil1 = Oil.pvt_from_correlation(     initial_conditions=init,     api = 31,     rsb = 675,     sg_gas = 0.95,     correlations=cor ) print(oil1.pvt.df()) <pre>                     rs        bo        co       muo        rho\npressure                                                        \n20.000000     70.222511  1.076649  0.018716  2.272673  51.178738\n282.105263   210.895351  1.144722  0.000403  1.408308  49.537946\n544.210526   285.093631  1.182737  0.000156  1.191746  48.641478\n806.315789   346.908386  1.215335  0.000088  1.062432  47.890476\n1068.421053  403.667546  1.245936  0.000058  0.969604  47.201993\n1330.526316  458.048011  1.275809  0.000043  0.897034  46.545992\n1592.631579  511.335510  1.305572  0.000033  0.837464  45.908448\n1854.736842  564.242666  1.335573  0.000026  0.787013  45.281961\n2116.842105  617.201069  1.366026  0.000022  0.743351  44.662384\n2378.947368  670.488149  1.397074  0.000018  0.704963  44.047339\n2641.052632  675.000000  1.394688  0.000015  0.712684  43.926841\n2903.157895  675.000000  1.390158  0.000014  0.724424  43.784158\n3165.263158  675.000000  1.386389  0.000013  0.736164  43.665459\n3427.368421  675.000000  1.383205  0.000012  0.747904  43.565167\n3689.473684  675.000000  1.380479  0.000011  0.759644  43.479309\n3951.578947  675.000000  1.378119  0.000010  0.771384  43.404977\n4213.684211  675.000000  1.376056  0.000009  0.783124  43.339997\n4475.789474  675.000000  1.374237  0.000009  0.794864  43.282708\n4737.894737  675.000000  1.372621  0.000008  0.806604  43.231822\n5000.000000  675.000000  1.371176  0.000008  0.818344  43.186321\n</pre> <p>Once created an Oil object without a PVT, you can generate a tabulated table with the main properties using PVT correlations.</p> <p>To set the the correlations to be used initialize an instance of `bk.SetOilCorrelations'. By default it has certain correlations</p> In\u00a0[11]: Copied! <pre>oil1.pvt.interpolate([500,1500,2500,3500])\n</pre> oil1.pvt.interpolate([500,1500,2500,3500]) Out[11]: rs bo co muo rho pressure 500 272.578258 1.176325 0.000197 1.228274 48.792690 1500 492.502980 1.295053 0.000036 0.858517 46.133765 2500 672.571936 1.395972 0.000017 0.708529 43.991687 3500 675.000000 1.382449 0.000011 0.751157 43.541375 In\u00a0[12]: Copied! <pre>oil1.pvt.df().plot(subplots=True, figsize=(10,7))\n</pre> oil1.pvt.df().plot(subplots=True, figsize=(10,7)) Out[12]: <pre>array([&lt;AxesSubplot:xlabel='pressure'&gt;, &lt;AxesSubplot:xlabel='pressure'&gt;,\n       &lt;AxesSubplot:xlabel='pressure'&gt;, &lt;AxesSubplot:xlabel='pressure'&gt;,\n       &lt;AxesSubplot:xlabel='pressure'&gt;], dtype=object)</pre> In\u00a0[13]: Copied! <pre>print(oil1.to_ecl())\n</pre> print(oil1.to_ecl()) <pre>-- OIL PVT TABLE FOR LIVE OIL\nPVTO\n-- rs      pres  bo      visc\n-- Mscf/rb psi   RB/STB  cP  \n-- ------- ----  ----    ---- \n0.070 20.000 1.077 2.273/\n0.212 284.559 1.145 1.406/\n0.286 549.119 1.183 1.189/\n0.349 813.678 1.216 1.060/\n0.406 1078.238 1.247 0.967/\n0.461 1342.797 1.277 0.894/\n0.514 1607.356 1.307 0.835/\n0.568 1871.916 1.338 0.784/\n0.621 2136.475 1.368 0.740/\n0.671 2401.035 1.397 0.706\n-- Unsaturated Data\n2920.828 1.390 0.725\n3440.621 1.383 0.748\n3960.414 1.378 0.772\n4480.207 1.374 0.795\n5000.000 1.371 0.818/\n/\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/2-Fluids/2a_Oil/#oil-model","title":"Oil Model\u00b6","text":"<p>You can create <code>Oil</code>, <code>Gas</code> and <code>Water</code> Python Objects that contain the main information that allow to characterize the fluid. They can contain, PVT, Chromatography, gravity among other values specific to the fluid.</p> <p>By creating an <code>Oil</code> object you can obtain a PVT table throughout common correlations described by Ahmed (Reservoir Engineering Handbook &amp; Equation of State and PVT Analysis ) and by Banzer (Correlaciones Num\u00e9ricas PVT)</p>"},{"location":"examples/2-Fluids/2a_Oil/#initial-conditions","title":"Initial Conditions.\u00b6","text":"<p>It is required to provide initial conditions</p>"},{"location":"examples/2-Fluids/2b_Gas/","title":"Gas Model","text":"In\u00a0[1]: Copied! <pre>from pvtpy.pvt import PVT\nimport pvtpy.black_oil as bk\nfrom pvtpy.fluids import Gas, InitialConditions\nfrom pvtpy.pvt import PVT\nfrom pvtpy.compositional import Chromatography\nfrom pvtpy.units import Pressure, Temperature\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n</pre> from pvtpy.pvt import PVT import pvtpy.black_oil as bk from pvtpy.fluids import Gas, InitialConditions from pvtpy.pvt import PVT from pvtpy.compositional import Chromatography from pvtpy.units import Pressure, Temperature import numpy as np import pandas as pd import seaborn as sns In\u00a0[2]: Copied! <pre>composition_dict = {\n    'mole_fraction':[0.0194,0.004,0.9598,0.0023,0.0057,0.0062,0.0006,0.0003,0.0001,0.0005,0.001,0.0001],\n    'compound':['carbon-dioxide','nitrogen','methane','ethane','propane','isobutane','n-butane','isopentane','n-pentane','n-hexane','n-heptane','n-octane']\n}\nchr = Chromatography.from_df(pd.DataFrame(composition_dict), name='compound', mole_fraction='mole_fraction')\n\nchr.df()\n</pre> composition_dict = {     'mole_fraction':[0.0194,0.004,0.9598,0.0023,0.0057,0.0062,0.0006,0.0003,0.0001,0.0005,0.001,0.0001],     'compound':['carbon-dioxide','nitrogen','methane','ethane','propane','isobutane','n-butane','isopentane','n-pentane','n-hexane','n-heptane','n-octane'] } chr = Chromatography.from_df(pd.DataFrame(composition_dict), name='compound', mole_fraction='mole_fraction')  chr.df() Out[2]: acentric_factor cas critical_pressure critical_temperature formula id iupac iupac_key mole_fraction molecular_weight peng_robinson redlich_kwong soave_redlich_kwong van_der_walls carbon-dioxide 0.2276 124-38-9 1071.0 87.91 CO2 50.0 1S/CO2/c2-1-3 CURLTUGMZLYLDI-UHFFFAOYSA-N 0.019414 44.0100 {} {} {} {} nitrogen 0.0403 7727-37-9 493.1 -232.51 N2 56.0 1S/N2/c1-2 IJGRMHOSHXDMSA-UHFFFAOYSA-N 0.004003 28.0134 {} {} {} {} methane 0.0115 74-82-8 666.4 -116.67 CH4 1.0 1S/CH4/h1H4 VNWKTOKETHGBQD-UHFFFAOYSA-N 0.960472 16.0425 {} {} {} {} ethane 0.0995 74-84-0 706.5 89.92 C2H6 2.0 1S/C2H6/c1-2/h1-2H3 OTMSDBZUPAUEDD-UHFFFAOYSA-N 0.002302 30.0700 {} {} {} {} propane 0.1523 74-98-6 616.0 206.06 C3H8 3.0 1S/C3H8/c1-3-2/h3H2;1-2H3 ATUOYWHBWRKTHZ-UHFFFAOYSA-N 0.005704 44.0970 {} {} {} {} isobutane 0.1770 75-28-5 527.9 274.46 C4H10 4.0 1S/C4H10/c1-4(2)3/h4H;1-3H3 NNPPMTNAJDCUHE-UHFFFAOYSA-N 0.006204 58.1230 {} {} {} {} isopentane 0.2275 78-78-4 490.4 369.10 C5H12 6.0 1S/C5H12/c1-4-5(2)3/h5H;4H2;1-3H3 QWTDNUCVQCZILF-UHFFFAOYSA-N 0.000300 72.1500 {} {} {} {} n-hexane 0.3013 110-54-3 436.9 453.60 C6H14 9.0 1S/C6H14/c1-3-5-6-4-2/h3-6H2;1-2H3 VLKZOEOYAKHREP-UHFFFAOYSA-N 0.000500 86.1770 {} {} {} {} n-heptane 0.3495 142-82-5 396.8 512.70 C7H16 14.0 1S/C7H16/c1-3-5-7-6-4-2/h3-7H2;1-2H3 IMNFDUFMRHMDMM-UHFFFAOYSA-N 0.001001 100.2040 {} {} {} {} n-octane 0.3996 111-65-9 360.7 564.22 C8H18 22.0 1S/C8H18/c1-3-5-7-8-6-4-2/h3-8H2;1-2H3 TVMXDCGIABBOFY-UHFFFAOYSA-N 0.000100 114.2310 {} {} {} {} In\u00a0[3]: Copied! <pre>chr.apparent_molecular_weight()\n</pre> chr.apparent_molecular_weight() Out[3]: <pre>17.23273911738217</pre> In\u00a0[4]: Copied! <pre>chr.gas_sg()\n</pre> chr.gas_sg() Out[4]: <pre>0.5950531463184451</pre> In\u00a0[5]: Copied! <pre>chr.get_pseudo_critical_properties()\n</pre> chr.get_pseudo_critical_properties() Out[5]: <pre>CriticalProperties(critical_pressure=Pressure(value=665.8662951011108, unit=&lt;PressureUnits.psi: 'psi'&gt;), critical_temperature=Temperature(value=-110.52626724778492, unit=&lt;TemperatureUnits.farenheit: 'farenheit'&gt;))</pre> In\u00a0[6]: Copied! <pre>chr.get_pseudo_critical_properties(correct=False)\n</pre> chr.get_pseudo_critical_properties(correct=False) Out[6]: <pre>CriticalProperties(critical_pressure=Pressure(value=672.0385169618734, unit=&lt;PressureUnits.psi: 'psi'&gt;), critical_temperature=Temperature(value=352.38010707495243, unit=&lt;TemperatureUnits.rankine: 'rankine'&gt;))</pre> In\u00a0[7]: Copied! <pre>chr.get_pseudo_critical_properties(correct_method='carr_kobayashi_burrows')\n</pre> chr.get_pseudo_critical_properties(correct_method='carr_kobayashi_burrows') Out[7]: <pre>CriticalProperties(critical_pressure=Pressure(value=679.9000200140099, unit=&lt;PressureUnits.psi: 'psi'&gt;), critical_temperature=Temperature(value=-109.84368057640353, unit=&lt;TemperatureUnits.farenheit: 'farenheit'&gt;))</pre> In\u00a0[8]: Copied! <pre>chr.get_z(\n    pressure=Pressure(value = 1500, unit='psi'), \n    temperature=Temperature(value = 560, unit='farenheit'),\n)\n</pre> chr.get_z(     pressure=Pressure(value = 1500, unit='psi'),      temperature=Temperature(value = 560, unit='farenheit'), ) Out[8]: z pressure 1500.0 0.994968 In\u00a0[9]: Copied! <pre>p_range = np.linspace(1000,5000,10)\nchr.get_z(pressure=Pressure(value=p_range), temperature=Temperature(value=180, unit='farenheit'))\n</pre> p_range = np.linspace(1000,5000,10) chr.get_z(pressure=Pressure(value=p_range), temperature=Temperature(value=180, unit='farenheit')) Out[9]: z pressure 1000.000000 0.935595 1444.444444 0.919677 1888.888889 0.911579 2333.333333 0.911301 2777.777778 0.918843 3222.222222 0.934204 3666.666667 0.957385 4111.111111 0.988385 4555.555556 1.027205 5000.000000 1.073845 In\u00a0[10]: Copied! <pre>chr.get_rhog(\n    pressure=Pressure(value=300, unit='psi'),\n    temperature=Temperature(value=180, unit='farenheit')\n)\n</pre> chr.get_rhog(     pressure=Pressure(value=300, unit='psi'),     temperature=Temperature(value=180, unit='farenheit') ) Out[10]: rhog pressure 300.0 0.771326 In\u00a0[11]: Copied! <pre>chr.get_rhog(\n    pressure=Pressure(value=1300, unit='psi'),\n    temperature=Temperature(value=180, unit='farenheit'), \n    rhog_method='ideal_gas')\n</pre> chr.get_rhog(     pressure=Pressure(value=1300, unit='psi'),     temperature=Temperature(value=180, unit='farenheit'),      rhog_method='ideal_gas') Out[11]: rhog pressure 1300.0 3.263938 In\u00a0[12]: Copied! <pre>chr.get_rhog(\n    pressure=Pressure(value=np.linspace(1000,5000,10)),\n    temperature=Temperature(value=180, unit='farenheit'), \n    rhog_method='real_gas'\n)\n</pre> chr.get_rhog(     pressure=Pressure(value=np.linspace(1000,5000,10)),     temperature=Temperature(value=180, unit='farenheit'),      rhog_method='real_gas' ) Out[12]: rhog pressure 1000.000000 2.683557 1444.444444 3.943338 1888.888889 5.202481 2333.333333 6.428556 2777.777778 7.590229 3222.222222 8.659890 3666.666667 9.615758 4111.111111 10.443151 4555.555556 11.134805 5000.000000 11.690333 In\u00a0[13]: Copied! <pre>chr.get_sv(\n    pressure=Pressure(value=np.linspace(1000,5000,10)),\n    temperature=Temperature(value=180, unit='farenheit'), \n    rhog_method='real_gas'\n)\n</pre> chr.get_sv(     pressure=Pressure(value=np.linspace(1000,5000,10)),     temperature=Temperature(value=180, unit='farenheit'),      rhog_method='real_gas' ) Out[13]: <pre>pressure\n1000.000000    0.372640\n1444.444444    0.253592\n1888.888889    0.192216\n2333.333333    0.155556\n2777.777778    0.131748\n3222.222222    0.115475\n3666.666667    0.103996\n4111.111111    0.095757\n4555.555556    0.089808\n5000.000000    0.085541\nName: sv, dtype: float64</pre> In\u00a0[14]: Copied! <pre>chr.get_sv(    pressure=Pressure(value=np.linspace(1000,5000,10)),\n    temperature=Temperature(value=180, unit='farenheit'), \n    rhog_method='real_gas')\n</pre> chr.get_sv(    pressure=Pressure(value=np.linspace(1000,5000,10)),     temperature=Temperature(value=180, unit='farenheit'),      rhog_method='real_gas') Out[14]: <pre>pressure\n1000.000000    0.372640\n1444.444444    0.253592\n1888.888889    0.192216\n2333.333333    0.155556\n2777.777778    0.131748\n3222.222222    0.115475\n3666.666667    0.103996\n4111.111111    0.095757\n4555.555556    0.089808\n5000.000000    0.085541\nName: sv, dtype: float64</pre> In\u00a0[15]: Copied! <pre>chr.gas_sg()\n</pre> chr.gas_sg() Out[15]: <pre>0.5950531463184451</pre> In\u00a0[16]: Copied! <pre>init = InitialConditions(pressure=Pressure(value=3600), temperature=Temperature(value=160))\n</pre> init = InitialConditions(pressure=Pressure(value=3600), temperature=Temperature(value=160)) In\u00a0[17]: Copied! <pre>gas1 = Gas.pvt_from_correlations(\n    initial_conditions=init,\n    gas_type='natural_gas',\n    sg=0.59,\n    chromatography=chr\n)\n</pre> gas1 = Gas.pvt_from_correlations(     initial_conditions=init,     gas_type='natural_gas',     sg=0.59,     chromatography=chr )  In\u00a0[18]: Copied! <pre>gas1.pseudo_critical_properties()\n</pre> gas1.pseudo_critical_properties() Out[18]: <pre>CriticalProperties(critical_pressure=Pressure(value=672.79625, unit=&lt;PressureUnits.psi: 'psi'&gt;), critical_temperature=Temperature(value=355.39875, unit=&lt;TemperatureUnits.rankine: 'rankine'&gt;))</pre> In\u00a0[19]: Copied! <pre>gas1.pvt.df()\n</pre>  gas1.pvt.df() Out[19]: z rhog bg mug cg pressure 20.000000 0.998092 0.051934 0.155550 0.013007 0.050000 282.105263 0.974719 0.750112 0.010770 0.013181 0.003545 544.210526 0.954374 1.477890 0.005466 0.013451 0.001838 806.315789 0.937058 2.230143 0.003622 0.013794 0.001240 1068.421053 0.922771 3.000839 0.002692 0.014201 0.000936 1330.526316 0.911512 3.783165 0.002135 0.014668 0.000752 1592.631579 0.903281 4.569686 0.001768 0.015189 0.000628 1854.736842 0.898079 5.352561 0.001509 0.015761 0.000539 2116.842105 0.895906 6.123788 0.001319 0.016375 0.000472 2378.947368 0.896761 6.875467 0.001175 0.017026 0.000420 2641.052632 0.900645 7.600071 0.001063 0.017702 0.000379 2903.157895 0.907557 8.290695 0.000974 0.018394 0.000344 3165.263158 0.917498 8.941267 0.000903 0.019091 0.000316 3427.368421 0.930467 9.546717 0.000846 0.019780 0.000292 3689.473684 0.946464 10.103091 0.000800 0.020449 0.000271 3951.578947 0.965491 10.607590 0.000762 0.021087 0.000253 4213.684211 0.987545 11.058572 0.000731 0.021684 0.000237 4475.789474 1.012629 11.455487 0.000705 0.022230 0.000223 4737.894737 1.040740 11.798779 0.000685 0.022719 0.000211 5000.000000 1.071881 12.089759 0.000668 0.023146 0.000200 In\u00a0[22]: Copied! <pre>print(gas1.to_ecl())\n</pre> print(gas1.to_ecl()) <pre>-- GAS PVT TABLE FOR LIVE OIL\nPVDG\n-- pres   bg       vic  \n-- psi    Rb/Mscf  cP  \n-- ----   ----     ---- \n  20.000 155.550 0.013\n 573.333   5.261 0.013\n1126.667   2.568 0.014\n1680.000   1.682 0.015\n2233.333   1.255 0.017\n2786.667   1.014 0.018\n3340.000   0.865 0.020\n3893.333   0.770 0.021\n4446.667   0.708 0.022\n5000.000   0.668 0.023/\n\n</pre>"},{"location":"examples/2-Fluids/2b_Gas/#gas-model","title":"Gas Model\u00b6","text":""},{"location":"examples/2-Fluids/2b_Gas/#create-a-chromatography-composition","title":"Create a chromatography composition\u00b6","text":""},{"location":"examples/2-Fluids/2b_Gas/#estimate-some-properties","title":"Estimate some properties\u00b6","text":""},{"location":"examples/2-Fluids/2b_Gas/#apparent-molecular-weigt","title":"Apparent Molecular Weigt\u00b6","text":"<p>The apparent Molecular Weight (ma) is calculated by summing the product of molar fraction and molecular weight of each component in the chromatography</p>"},{"location":"examples/2-Fluids/2b_Gas/#gas-specific-gravity","title":"Gas specific gravity\u00b6","text":"<p>The Gas specific gravity is calculated by diving the ma by the specific gravity of the air</p>"},{"location":"examples/2-Fluids/2b_Gas/#pseudo-critical-properties","title":"Pseudo critical properties\u00b6","text":"<p>The Pseudo critical properties are calulated by summing the product of mole fraction and critical properties (pressure and temperature). By default it corrects the properties by Non-hydrocarbon components with the wichert-aziz correlation.</p>"},{"location":"examples/2-Fluids/2b_Gas/#get-the-compressibility-factor-of-gas","title":"Get the compressibility factor of gas\u00b6","text":"<p>Estimate the compressibility factor by estimating the critical properties and applying the default correlation method papay</p>"},{"location":"examples/2-Fluids/2b_Gas/#get-the-gas-density-in-lbft3","title":"Get the gas density in lb/ft3\u00b6","text":"<p>Estimate the gas density by estimating the ma, the z factor and finnaly applying the gas equation of state for real gases</p>"},{"location":"examples/2-Fluids/2b_Gas/#estimate-the-specific-volume-of-gas","title":"Estimate the Specific volume of Gas.\u00b6","text":"<p>Get the specific volume by estimate the inverse of the density</p>"},{"location":"examples/2-Fluids/2b_Gas/#create-the-gas-object","title":"Create the Gas object\u00b6","text":""},{"location":"examples/2-Fluids/2c_water/","title":"Water Model","text":"In\u00a0[1]: Copied! <pre>from pvtpy.fluids import Water, InitialConditions\nfrom pvtpy.units import Pressure, Temperature\nimport pvtpy.black_oil as bk\n</pre> from pvtpy.fluids import Water, InitialConditions from pvtpy.units import Pressure, Temperature import pvtpy.black_oil as bk In\u00a0[2]: Copied! <pre>init = InitialConditions(\n    pressure=Pressure(value=2500), \n    temperature=Temperature(value=120)\n)\ninit\n</pre> init = InitialConditions(     pressure=Pressure(value=2500),      temperature=Temperature(value=120) ) init Out[2]: <pre>InitialConditions(pressure=Pressure(value=2500.0, unit=&lt;PressureUnits.psi: 'psi'&gt;), temperature=Temperature(value=120.0, unit=&lt;TemperatureUnits.farenheit: 'farenheit'&gt;))</pre> In\u00a0[3]: Copied! <pre>cor = bk.SetWaterCorrelations()\ncor.dict()\n</pre> cor = bk.SetWaterCorrelations() cor.dict() Out[3]: <pre>{'rsw': &lt;rsw_correlations.culberson: 'culberson'&gt;,\n 'cw': &lt;cw_correlations.standing: 'standing'&gt;,\n 'bw': &lt;bw_correlations.mccain: 'mccain'&gt;,\n 'rhow': &lt;rhow_correlations.banzer: 'banzer'&gt;,\n 'muw': &lt;muw_correlations.van_wingen: 'van_wingen'&gt;}</pre> In\u00a0[4]: Copied! <pre>wa1 = Water.pvt_from_correlation(\n    initial_conditions=init, \n    salinity=500, \n    pb=Pressure(value=2500,unit='psi'),\n    start_pressure=20, \n    end_pressure=5000, \n    n=20,\n    correlations=cor\n)\n\nprint(wa1.pvt.df())\n</pre> wa1 = Water.pvt_from_correlation(     initial_conditions=init,      salinity=500,      pb=Pressure(value=2500,unit='psi'),     start_pressure=20,      end_pressure=5000,      n=20,     correlations=cor )  print(wa1.pvt.df()) <pre>                    rs        cw        bw       muw       rhow\npressure                                                       \n20.000000     3.290010  0.000003  1.013934  0.614841  61.563854\n282.105263    4.596583  0.000003  1.013757  0.614841  61.574594\n544.210526    5.873936  0.000003  1.013546  0.614841  61.587422\n806.315789    7.122071  0.000003  1.013301  0.614841  61.602339\n1068.421053   8.340986  0.000003  1.013021  0.614841  61.619349\n1330.526316   9.530682  0.000003  1.012707  0.614841  61.638454\n1592.631579  10.691159  0.000003  1.012359  0.614841  61.659660\n1854.736842  11.822417  0.000003  1.011976  0.614841  61.682969\n2116.842105  12.924456  0.000003  1.011559  0.614841  61.708388\n2378.947368  13.997275  0.000003  1.011108  0.614841  61.735921\n2641.052632  15.040875  0.000003  1.010418  0.614841  61.778071\n2903.157895  16.055257  0.000003  1.009546  0.614841  61.831463\n3165.263158  17.040419  0.000003  1.008675  0.614841  61.884839\n3427.368421  17.996361  0.000003  1.007807  0.614841  61.938144\n3689.473684  18.923085  0.000003  1.006942  0.614841  61.991323\n3951.578947  19.820590  0.000003  1.006082  0.614841  62.044323\n4213.684211  20.688875  0.000003  1.005227  0.614841  62.097089\n4475.789474  21.527941  0.000003  1.004378  0.614841  62.149571\n4737.894737  22.337788  0.000003  1.003536  0.614841  62.201718\n5000.000000  23.118416  0.000003  1.002702  0.614841  62.253479\n</pre> In\u00a0[5]: Copied! <pre>print(wa1.to_ecl())\n</pre> print(wa1.to_ecl()) <pre>-- WATER PVT TABLE\nPVTW\n-- pres   bw       cw     visc  visc  \n-- psi    RB/STB   1/PSIA cP    GRAD \n-- ----   ----     ---- \n1.014 0.000 0.615\n1.014 0.000 0.615\n1.013 0.000 0.615\n1.012 0.000 0.615\n1.011 0.000 0.615\n1.010 0.000 0.615\n1.008 0.000 0.615\n1.006 0.000 0.615\n1.004 0.000 0.615\n1.003 0.000 0.615/\n\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/2-Fluids/2c_water/#water-model","title":"Water Model\u00b6","text":""},{"location":"examples/3-chromatography/1a-parsing_components/","title":"1a parsing components","text":"In\u00a0[\u00a0]: Copied! <pre>from typing import List \nimport pvtpy.compositional as comp\nfrom pydantic import parse_obj_as\n</pre> from typing import List  import pvtpy.compositional as comp from pydantic import parse_obj_as In\u00a0[\u00a0]: Copied! <pre>comps_dict = comp.properties_df.head(15).to_dict(orient='records')\n</pre> comps_dict = comp.properties_df.head(15).to_dict(orient='records') <p>print(comps_dict)</p> In\u00a0[\u00a0]: Copied! <pre>first = comp.Component(**comps_dict[0])\n</pre> first = comp.Component(**comps_dict[0]) <p>print(first)</p> In\u00a0[\u00a0]: Copied! <pre>items = parse_obj_as(List[comp.Component], comps_dict)\n</pre> items = parse_obj_as(List[comp.Component], comps_dict) In\u00a0[\u00a0]: Copied! <pre>for i in items:\n    print(f'Component {i.name} mw {i.molecular_weight}')\n</pre> for i in items:     print(f'Component {i.name} mw {i.molecular_weight}') <p>comps = parse_obj_as( List[comp.Component], comps_dict )</p>"},{"location":"examples/3-chromatography/3b-Chromatography/","title":"Chromatography Object","text":"In\u00a0[1]: Copied! <pre>from pvtpy.compositional import Chromatography, properties_df, Component\nfrom pvtpy.units import Pressure, Temperature\nimport numpy as np\nimport pandas as pd\n</pre> from pvtpy.compositional import Chromatography, properties_df, Component from pvtpy.units import Pressure, Temperature import numpy as np import pandas as pd <p>Pvtpy has built-in a dataframe with 64 components and its critical values. You can display the properties values with the <code>properties_df</code> object which is a simple dataframe.</p> In\u00a0[2]: Copied! <pre>print(properties_df.tail(20))\n</pre> print(properties_df.tail(20)) <pre>               id                    iupac_key  \\\nname                                             \nammonia        53  QGZKDVFQNNGYKY-UHFFFAOYSA-N   \nhydrogen       54  UFHFLCQGNIYNRP-UHFFFAOYSA-N   \noxygen         55  MYMOFIZGZYHOMD-UHFFFAOYSA-N   \nnitrogen       56  IJGRMHOSHXDMSA-UHFFFAOYSA-N   \nchlorine       57  KZBUYRJDOAKODT-UHFFFAOYSA-N   \nwater          58  XLYOFNOQVPJJNP-UHFFFAOYSA-N   \nn-undecane     59  RSJKGSCJYJTIGS-UHFFFAOYSA-N   \nn-dodecane     60  SNRUBQQJIBEYMU-UHFFFAOYSA-N   \nn-tridecane    61  IIYFAKIEWZDVMP-UHFFFAOYSA-N   \nn-tetradecane  62  BGHCVCJVXZWKCC-UHFFFAOYSA-N   \nn-pentadecane  63  YCOZIPAWZNQLMR-UHFFFAOYSA-N   \nn-hexadecane   64  DCAYPVUWAIABOU-UHFFFAOYSA-N   \nn-heptadecane  65  NDJKXXJCMXVBJW-UHFFFAOYSA-N   \nn-octadecane   66  RZJRJXONCZWCBN-UHFFFAOYSA-N   \nn-nonadecane   67  LQERIDTXQFOHKA-UHFFFAOYSA-N   \nn-eicosane     68  CBFCDTFDPHXCNY-UHFFFAOYSA-N   \nn-heneicosane  69  FNAZRRHPUDJQCJ-UHFFFAOYSA-N   \nn-docosane     70  HOWGUJZVBDQJKV-UHFFFAOYSA-N   \nn-tricosane    71  FIGVVZUWCLSUEI-UHFFFAOYSA-N   \nn-tetracosane  72  POOSGDOYLQNASK-UHFFFAOYSA-N   \n\n                                                           iupac        cas  \\\nname                                                                          \nammonia                                              1S/H3N/h1H3  7664-41-7   \nhydrogen                                               1S/H2/h1H  1333-74-0   \noxygen                                                1S/O2/c1-2  7782-44-7   \nnitrogen                                              1S/N2/c1-2  7727-37-9   \nchlorine                                             1S/Cl2/c1-2  7782-50-5   \nwater                                                1S/H2O/h1H2  7732-18-5   \nn-undecane      1S/C11H24/c1-3-5-7-9-11-10-8-6-4-2/h3-11H2;1-2H3  1120-21-4   \nn-dodecane     1S/C12H26/c1-3-5-7-9-11-12-10-8-6-4-2/h3-12H2;...   112-40-3   \nn-tridecane    1S/C13H28/c1-3-5-7-9-11-13-12-10-8-6-4-2/h3-13...   629-50-5   \nn-tetradecane  1S/C14H30/c1-3-5-7-9-11-13-14-12-10-8-6-4-2/h3...   629-59-4   \nn-pentadecane  1S/C15H32/c1-3-5-7-9-11-13-15-14-12-10-8-6-4-2...   629-62-9   \nn-hexadecane   1S/C16H34/c1-3-5-7-9-11-13-15-16-14-12-10-8-6-...   544-76-3   \nn-heptadecane  1S/C17H36/c1-3-5-7-9-11-13-15-17-16-14-12-10-8...   629-78-7   \nn-octadecane   1S/C18H38/c1-3-5-7-9-11-13-15-17-18-16-14-12-1...   593-45-3   \nn-nonadecane   1S/C19H40/c1-3-5-7-9-11-13-15-17-19-18-16-14-1...   629-92-5   \nn-eicosane     1S/C20H42/c1-3-5-7-9-11-13-15-17-19-20-18-16-1...   112-95-8   \nn-heneicosane  1S/C21H44/c1-3-5-7-9-11-13-15-17-19-21-20-18-1...   629-94-7   \nn-docosane     1S/C22H46/c1-3-5-7-9-11-13-15-17-19-21-22-20-1...   629-97-0   \nn-tricosane    1S/C23H48/c1-3-5-7-9-11-13-15-17-19-21-23-22-2...   638-67-5   \nn-tetracosane  1S/C24H50/c1-3-5-7-9-11-13-15-17-19-21-23-24-2...   646-31-1   \n\n               acentric_factor formula  molecular_weight  critical_pressure  \\\nname                                                                          \nammonia                    NaN     NH3           17.0305             1646.0   \nhydrogen               -0.2150      H2            2.0159              188.1   \noxygen                  0.0218      O2           31.9988              731.4   \nnitrogen                0.0403      N2           28.0134              493.1   \nchlorine                   NaN     CL2           70.9060             1157.0   \nwater                   0.3449     H2O           18.0153             3198.8   \nn-undecane              0.5303  C11H24          146.3120             1949.0   \nn-dodecane              0.5764  C12H26          170.3380             1820.0   \nn-tridecane             0.6174  C13H28          184.3650             1680.0   \nn-tetradecane           0.6430  C14H30          198.3920             1570.0   \nn-pentadecane           0.6863  C15H32          212.4190             1480.0   \nn-hexadecane            0.7174  C16H34          226.4460             1400.0   \nn-heptadecane           0.7697  C17H36          240.4730             1340.0   \nn-octadecane            0.8114  C18H38          254.5000             1270.0   \nn-nonadecane            0.8522  C19H40          268.5270             1210.0   \nn-eicosane              0.9069  C20H42          282.5530             1160.0   \nn-heneicosane           0.9220  C21H44          296.5800             1147.0   \nn-docosane              0.9550  C22H46          310.6100             1101.0   \nn-tricosane             0.9890  C23H48          324.6300             1059.0   \nn-tetracosane           1.0190  C24H50          338.6800             1019.0   \n\n              critical_pressure_unit  critical_temperature  \\\nname                                                         \nammonia                          psi                270.20   \nhydrogen                         psi               -399.90   \noxygen                           psi               -181.43   \nnitrogen                         psi               -232.51   \nchlorine                         psi                290.75   \nwater                            psi                705.16   \nn-undecane                       kpa                639.00   \nn-dodecane                       kpa                658.00   \nn-tridecane                      kpa                675.00   \nn-tetradecane                    kpa                693.00   \nn-pentadecane                    kpa                708.00   \nn-hexadecane                     kpa                723.00   \nn-heptadecane                    kpa                736.00   \nn-octadecane                     kpa                747.00   \nn-nonadecane                     kpa                758.00   \nn-eicosane                       kpa                768.00   \nn-heneicosane                    kpa                781.70   \nn-docosane                       kpa                791.80   \nn-tricosane                      kpa                801.30   \nn-tetracosane                    kpa                810.40   \n\n              critical_temperature_unit  antoine_a  antoine_b  antoine_c  \nname                                                                      \nammonia                       farenheit   4.868860    113.928    -10.409  \nhydrogen                      farenheit   3.543140     99.395      7.726  \noxygen                        farenheit   3.952300    340.024     -4.144  \nnitrogen                      farenheit   3.736200    264.651     -6.788  \nchlorine                      farenheit   4.288140    969.992    -12.791  \nwater                         farenheit   5.402210   1838.675    -31.737  \nn-undecane                       kelvin   4.101640   1572.477    -85.128  \nn-dodecane                       kelvin   4.105490   1625.928    -92.839  \nn-tridecane                      kelvin   4.128290   1689.093    -98.866  \nn-tetradecane                    kelvin   4.137350   1739.623   -105.616  \nn-pentadecane                    kelvin   4.149350   1789.658   -111.859  \nn-hexadecane                     kelvin   4.173120   1845.672   -117.054  \nn-heptadecane                    kelvin   3.927300   1718.004   -138.126  \nn-octadecane                     kelvin   4.332090   2068.963   -111.927  \nn-nonadecane                     kelvin  30.428160  28197.488    452.785  \nn-eicosane                       kelvin        NaN        NaN        NaN  \nn-heneicosane                    kelvin   5.920730   3571.218    -19.953  \nn-docosane                       kelvin        NaN        NaN        NaN  \nn-tricosane                      kelvin   6.557006   4200.069      1.864  \nn-tetracosane                    kelvin   5.738300   3464.273    -55.121  \n</pre> <p>Having the properties table, you can build a custom Chromatography table by providing the componets id, name or symbol and the mole fraction</p> <p>Construct by its name</p> In\u00a0[3]: Copied! <pre>d = {\n    'comp': ['methane','ethane','propane','isobutane'],\n    'mole_fraction':[0.90,0.07,0.02,0.06]\n}\ncc = pd.DataFrame(d)\n\nch = Chromatography()\nch.from_df(cc,name='comp')\n</pre> d = {     'comp': ['methane','ethane','propane','isobutane'],     'mole_fraction':[0.90,0.07,0.02,0.06] } cc = pd.DataFrame(d)  ch = Chromatography() ch.from_df(cc,name='comp')   In\u00a0[4]: Copied! <pre>ch.df()\n</pre> ch.df() Out[4]: acentric_factor cas critical_pressure critical_temperature formula id iupac iupac_key mole_fraction molecular_weight peng_robinson redlich_kwong soave_redlich_kwong van_der_walls methane 0.0115 74-82-8 666.4 -116.67 CH4 1.0 1S/CH4/h1H4 VNWKTOKETHGBQD-UHFFFAOYSA-N 0.857143 16.0425 {} {} {} {} ethane 0.0995 74-84-0 706.5 89.92 C2H6 2.0 1S/C2H6/c1-2/h1-2H3 OTMSDBZUPAUEDD-UHFFFAOYSA-N 0.066667 30.0700 {} {} {} {} propane 0.1523 74-98-6 616.0 206.06 C3H8 3.0 1S/C3H8/c1-3-2/h3H2;1-2H3 ATUOYWHBWRKTHZ-UHFFFAOYSA-N 0.019048 44.0970 {} {} {} {} isobutane 0.1770 75-28-5 527.9 274.46 C4H10 4.0 1S/C4H10/c1-4(2)3/h4H;1-3H3 NNPPMTNAJDCUHE-UHFFFAOYSA-N 0.057143 58.1230 {} {} {} {} In\u00a0[5]: Copied! <pre>ch.components[3].df()\n</pre> ch.components[3].df() Out[5]: <pre>formula                                       C4H10\niupac_key               NNPPMTNAJDCUHE-UHFFFAOYSA-N\niupac                   1S/C4H10/c1-4(2)3/h4H;1-3H3\ncas                                         75-28-5\nmolecular_weight                             58.123\nvan_der_walls                                    {}\nredlich_kwong                                    {}\nsoave_redlich_kwong                              {}\npeng_robinson                                    {}\nmole_fraction                                  0.06\ncritical_pressure                             527.9\ncritical_temperature                         274.46\nid                                              4.0\nacentric_factor                               0.177\nName: isobutane, dtype: object</pre> <p>By default, the mole_fraction provided is normalized to sum 1.</p> In\u00a0[6]: Copied! <pre>ch.apparent_molecular_weight()\n</pre> ch.apparent_molecular_weight() Out[6]: <pre>19.916638095238095</pre> In\u00a0[7]: Copied! <pre>d1 = {\n    'comp': ['propane','isobutane','butane','isopentane','pentane','n-hexane'],\n    'mole_fraction':[0.2,0.1,0.1,0.2,0.2,0.2]\n}\n\nch1 = Chromatography()\nch1.from_df(pd.DataFrame(d1),name='comp')\n</pre> d1 = {     'comp': ['propane','isobutane','butane','isopentane','pentane','n-hexane'],     'mole_fraction':[0.2,0.1,0.1,0.2,0.2,0.2] }  ch1 = Chromatography() ch1.from_df(pd.DataFrame(d1),name='comp') In\u00a0[8]: Copied! <pre>ch1.vapor_pressure(Temperature(value=100, unit='farenheit'))\n</pre> ch1.vapor_pressure(Temperature(value=100, unit='farenheit')) Out[8]: vapor_pressure vapor_pressure_unit propane 188.735859 psi isobutane 72.316273 psi butane 51.405353 psi isopentane 20.704631 psi pentane 15.573256 psi n-hexane 4.955708 psi In\u00a0[9]: Copied! <pre>p1 = Pressure(value=50, unit='psi')\nt1 = Temperature(value=100, unit='farenheit')\n\nflash_df,moles = ch1.flash_calculations(p1,t1, k_method='ideal')\n\nflash_df\n</pre> p1 = Pressure(value=50, unit='psi') t1 = Temperature(value=100, unit='farenheit')  flash_df,moles = ch1.flash_calculations(p1,t1, k_method='ideal')  flash_df Out[9]: mole_fraction xi yi k propane 0.2 0.154158 0.581903 3.774717 isobutane 0.1 0.095435 0.138030 1.446325 butane 0.1 0.099700 0.102502 1.028107 isopentane 0.2 0.213400 0.088367 0.414093 pentane 0.2 0.215934 0.067256 0.311465 n-hexane 0.2 0.221373 0.021941 0.099114 In\u00a0[10]: Copied! <pre>flash_df[['xi','yi']].sum()\n</pre> flash_df[['xi','yi']].sum() Out[10]: <pre>xi    1.0\nyi    1.0\ndtype: float64</pre> In\u00a0[11]: Copied! <pre>d2 = {\n    'comp': ['carbon-dioxide','nitrogen','methane','ethane','propane','isobutane','butane','isopentane','pentane','n-hexane'],\n    'mole_fraction':[0.009,0.003,0.535,0.115,0.088,0.023,0.023,0.015,0.015,0.015]\n}\n\nc7_plus = Component(\n    name = 'C7+', \n    molecular_weight=150.0,\n    specific_gravity = 0.78,\n    critical_temperature = 1139.4,\n    critical_temperature_unit = 'rankine',\n    critical_pressure = 320.3,\n    critical_pressure_unit = 'psi',\n    mole_fraction=0.005,\n    params = {'acentric_factor':0.5067}\n    \n)\n\nch2 = Chromatography()\nch2.from_df(pd.DataFrame(d2),name='comp')\nch2.plus_fraction = c7_plus\n</pre> d2 = {     'comp': ['carbon-dioxide','nitrogen','methane','ethane','propane','isobutane','butane','isopentane','pentane','n-hexane'],     'mole_fraction':[0.009,0.003,0.535,0.115,0.088,0.023,0.023,0.015,0.015,0.015] }  c7_plus = Component(     name = 'C7+',      molecular_weight=150.0,     specific_gravity = 0.78,     critical_temperature = 1139.4,     critical_temperature_unit = 'rankine',     critical_pressure = 320.3,     critical_pressure_unit = 'psi',     mole_fraction=0.005,     params = {'acentric_factor':0.5067}      )  ch2 = Chromatography() ch2.from_df(pd.DataFrame(d2),name='comp') ch2.plus_fraction = c7_plus  In\u00a0[12]: Copied! <pre>ch2.df(temperature_unit='rankine')\n</pre> ch2.df(temperature_unit='rankine') Out[12]: acentric_factor cas critical_pressure critical_temperature formula id iupac iupac_key mole_fraction molecular_weight peng_robinson redlich_kwong soave_redlich_kwong van_der_walls specific_gravity carbon-dioxide 0.2276 124-38-9 1071.0 547.58 CO2 50.0 1S/CO2/c2-1-3 CURLTUGMZLYLDI-UHFFFAOYSA-N 0.010638 44.0100 {} {} {} {} NaN nitrogen 0.0403 7727-37-9 493.1 227.16 N2 56.0 1S/N2/c1-2 IJGRMHOSHXDMSA-UHFFFAOYSA-N 0.003546 28.0134 {} {} {} {} NaN methane 0.0115 74-82-8 666.4 343.00 CH4 1.0 1S/CH4/h1H4 VNWKTOKETHGBQD-UHFFFAOYSA-N 0.632388 16.0425 {} {} {} {} NaN ethane 0.0995 74-84-0 706.5 549.59 C2H6 2.0 1S/C2H6/c1-2/h1-2H3 OTMSDBZUPAUEDD-UHFFFAOYSA-N 0.135934 30.0700 {} {} {} {} NaN propane 0.1523 74-98-6 616.0 665.73 C3H8 3.0 1S/C3H8/c1-3-2/h3H2;1-2H3 ATUOYWHBWRKTHZ-UHFFFAOYSA-N 0.104019 44.0970 {} {} {} {} NaN isobutane 0.1770 75-28-5 527.9 734.13 C4H10 4.0 1S/C4H10/c1-4(2)3/h4H;1-3H3 NNPPMTNAJDCUHE-UHFFFAOYSA-N 0.027187 58.1230 {} {} {} {} NaN butane 0.2002 106-97-8 550.6 765.29 C4H10 5.0 1S/C4H10/c1-3-4-2/h3-4H2;1-2H3 IJDNQMDRQITEOD-UHFFFAOYSA-N 0.027187 58.1230 {} {} {} {} NaN isopentane 0.2275 78-78-4 490.4 828.77 C5H12 6.0 1S/C5H12/c1-4-5(2)3/h5H;4H2;1-3H3 QWTDNUCVQCZILF-UHFFFAOYSA-N 0.017730 72.1500 {} {} {} {} NaN pentane 0.2515 109-66-0 488.6 845.47 C5H12 7.0 1S/C5H12/c1-3-5-4-2/h3-5H2;1-2H3 OFBQJSOFQDEBGM-UHFFFAOYSA-N 0.017730 73.1500 {} {} {} {} NaN n-hexane 0.3013 110-54-3 436.9 913.27 C6H14 9.0 1S/C6H14/c1-3-5-6-4-2/h3-6H2;1-2H3 VLKZOEOYAKHREP-UHFFFAOYSA-N 0.017730 86.1770 {} {} {} {} NaN C7+ 0.5067 NaN 320.3 1139.40 NaN NaN NaN NaN 0.005910 150.0000 {} {} {} {} 0.78 In\u00a0[13]: Copied! <pre>t2 = Temperature(value=150, unit='farenheit')\np2 = Pressure(value=1000, unit='psi')\n</pre> t2 = Temperature(value=150, unit='farenheit') p2 = Pressure(value=1000, unit='psi') In\u00a0[14]: Copied! <pre>ch2.equilibrium_ratios(p2,t2)\n</pre> ch2.equilibrium_ratios(p2,t2) Out[14]: <pre>carbon-dioxide     2.095845\nnitrogen          16.410130\nmethane            7.170587\nethane             1.264162\npropane            0.348719\nisobutane          0.145274\nbutane             0.106260\nisopentane         0.045894\npentane            0.036316\nn-hexane           0.013462\nC7+                0.000283\nName: k, dtype: float64</pre> In\u00a0[15]: Copied! <pre>f2 = ch2.flash_calculations(p2,t2,k_method='wilson')\nf2\n</pre> f2 = ch2.flash_calculations(p2,t2,k_method='wilson') f2 Out[15]: <pre>(                mole_fraction        xi        yi          k\n carbon-dioxide       0.010638  0.005513  0.011554   2.095845\n nitrogen             0.003546  0.000252  0.004135  16.410130\n methane              0.632388  0.101424  0.727270   7.170587\n ethane               0.135934  0.111047  0.140381   1.264162\n propane              0.104019  0.232467  0.081065   0.348719\n isobutane            0.027187  0.098913  0.014369   0.145274\n butane               0.027187  0.112455  0.011949   0.106260\n isopentane           0.017730  0.093053  0.004271   0.045894\n pentane              0.017730  0.097198  0.003530   0.036316\n n-hexane             0.017730  0.108758  0.001464   0.013462\n C7+                  0.005910  0.038922  0.000011   0.000283,\n {'liquid_moles': 0.1516065503028332, 'gas_moles': 0.8483934496971668})</pre> In\u00a0[16]: Copied! <pre>ch2.convergence_pressure(t2.convert_to('rankine'), method='rzasa')\n</pre> ch2.convergence_pressure(t2.convert_to('rankine'), method='rzasa') Out[16]: <pre>6340.447020009115</pre> In\u00a0[17]: Copied! <pre>ch2.equilibrium_ratios(p2,t2,method='whitson', pk_method='rzasa')\n</pre> ch2.equilibrium_ratios(p2,t2,method='whitson', pk_method='rzasa') Out[17]: <pre>carbon-dioxide     2.840011\nnitrogen          12.640159\nmethane            6.932466\nethane             1.968014\npropane            0.773084\nisobutane          0.409564\nbutane             0.326424\nisopentane         0.177522\npentane            0.149794\nn-hexane           0.072913\nC7+                0.004429\nName: k, dtype: float64</pre> In\u00a0[18]: Copied! <pre>d3 = {\n    'comp': ['methane','ethane','propane','isobutane','butane','isopentane','pentane','n-hexane'],\n    'mole_fraction':[0.8,0.05,0.04,0.03,0.02,0.03,0.02,0.005]\n}\n\nc7_plus1 = Component(\n    name = 'C7+', \n    molecular_weight=140.0,\n    specific_gravity = 0.8,\n    mole_fraction=0.005,   \n)\n\nch3 = Chromatography()\nch3.from_df(pd.DataFrame(d3),name='comp')\nch3.plus_fraction = c7_plus1\n\nch3.df()['mole_fraction']\n</pre> d3 = {     'comp': ['methane','ethane','propane','isobutane','butane','isopentane','pentane','n-hexane'],     'mole_fraction':[0.8,0.05,0.04,0.03,0.02,0.03,0.02,0.005] }  c7_plus1 = Component(     name = 'C7+',      molecular_weight=140.0,     specific_gravity = 0.8,     mole_fraction=0.005,    )  ch3 = Chromatography() ch3.from_df(pd.DataFrame(d3),name='comp') ch3.plus_fraction = c7_plus1  ch3.df()['mole_fraction'] Out[18]: <pre>methane       0.800\nethane        0.050\npropane       0.040\nisobutane     0.030\nbutane        0.020\nisopentane    0.030\npentane       0.020\nn-hexane      0.005\nC7+           0.005\nName: mole_fraction, dtype: float64</pre> In\u00a0[19]: Copied! <pre>t3 = Temperature(value=250, unit='farenheit')\n</pre> t3 = Temperature(value=250, unit='farenheit') In\u00a0[20]: Copied! <pre>ch3.vapor_pressure(t3)\n</pre> ch3.vapor_pressure(t3) Out[20]: vapor_pressure vapor_pressure_unit methane 10614.307094 psi ethane 2250.990986 psi propane 904.175597 psi isobutane 421.487433 psi butane 330.951526 psi isopentane 166.827670 psi pentane 133.257353 psi n-hexane 59.305130 psi In\u00a0[21]: Copied! <pre>ch3.convergence_pressure(t3, method='rzasa')\n</pre> ch3.convergence_pressure(t3, method='rzasa') Out[21]: <pre>5036.176515953768</pre> In\u00a0[22]: Copied! <pre>ch2.dew_point(t3)\n</pre> ch2.dew_point(t3) Out[22]: <pre>295.0081247904794</pre> In\u00a0[23]: Copied! <pre>d4 = {\n    'comp': ['methane','ethane','propane','isobutane','butane','isopentane','pentane','n-hexane'],\n    'mole_fraction':[0.8,0.05,0.04,0.03,0.02,0.03,0.02,0.005]\n}\n\nc7_plus4 = Component(\n    name = 'C7+', \n    molecular_weight=216.0,\n    specific_gravity = 0.8605,\n    mole_fraction=0.005,   \n    critical_pressure=140,\n    critical_pressure_unit='psi',\n    critical_temperature=1279.8,\n    critical_temperature_unit='rankine',\n    params = {'acentric_factor':0.6353}\n)\n\nch4 = Chromatography()\nch4.from_df(pd.DataFrame(d4),name='comp')\nch4.plus_fraction = c7_plus4\n\nch4.df()['mole_fraction']\n</pre> d4 = {     'comp': ['methane','ethane','propane','isobutane','butane','isopentane','pentane','n-hexane'],     'mole_fraction':[0.8,0.05,0.04,0.03,0.02,0.03,0.02,0.005] }  c7_plus4 = Component(     name = 'C7+',      molecular_weight=216.0,     specific_gravity = 0.8605,     mole_fraction=0.005,        critical_pressure=140,     critical_pressure_unit='psi',     critical_temperature=1279.8,     critical_temperature_unit='rankine',     params = {'acentric_factor':0.6353} )  ch4 = Chromatography() ch4.from_df(pd.DataFrame(d4),name='comp') ch4.plus_fraction = c7_plus4  ch4.df()['mole_fraction'] Out[23]: <pre>methane       0.800\nethane        0.050\npropane       0.040\nisobutane     0.030\nbutane        0.020\nisopentane    0.030\npentane       0.020\nn-hexane      0.005\nC7+           0.005\nName: mole_fraction, dtype: float64</pre> In\u00a0[24]: Copied! <pre>t4 = Temperature(value=200, unit='farenheit')\n</pre> t4 = Temperature(value=200, unit='farenheit') In\u00a0[25]: Copied! <pre>ch4.convergence_pressure(t4)\n</pre> ch4.convergence_pressure(t4) Out[25]: <pre>8760.0</pre> In\u00a0[26]: Copied! <pre>ch4.bubble_point(t4, k_method='wilson', pk_method='rzasa', method='brentq',bracket=[10,10100])\n</pre> ch4.bubble_point(t4, k_method='wilson', pk_method='rzasa', method='brentq',bracket=[10,10100]) <pre>guesss 7096.641782999256\n10.0\n10100.0\n10096.287548921608\n6353.178998245239\n7740.9031051774045\n7417.157990169664\n7365.207328418204\n7365.571197067084\n7365.568666338099\n7365.568666213941\n7365.568666213945\n</pre> Out[26]: <pre>7365.568666213941</pre> In\u00a0[27]: Copied! <pre>df4 = ch4.df()\ndf4['k'] = ch4.equilibrium_ratios(\n    Pressure(value=7365.58783690, unit='psi'),\n    Temperature(value=200, unit='farenheit'),\n    method='whitson',\n    pk_method='rzasa'\n)\ndf4['k']\n</pre> df4 = ch4.df() df4['k'] = ch4.equilibrium_ratios(     Pressure(value=7365.58783690, unit='psi'),     Temperature(value=200, unit='farenheit'),     method='whitson',     pk_method='rzasa' ) df4['k'] Out[27]: <pre>methane       1.319077\nethane        0.986706\npropane       0.792710\nisobutane     0.681919\nbutane        0.647810\nisopentane    0.561147\npentane       0.540007\nn-hexane      0.456459\nC7+           0.131417\nName: k, dtype: float64</pre> In\u00a0[28]: Copied! <pre>np.sum(df4['mole_fraction']*df4['k'])-1\n</pre> np.sum(df4['mole_fraction']*df4['k'])-1 Out[28]: <pre>0.20029267184443644</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/3-chromatography/3b-Chromatography/#chromatography-object","title":"Chromatography Object\u00b6","text":"<p>You can define a Chromatography object by providing a tabulated data indexed by pressure.</p>"},{"location":"examples/3-chromatography/3b-Chromatography/#example-5-1-ahmed-tarek-equation-of-state-and-pvt-analysis","title":"Example 5-1 - Ahmed Tarek, Equation of State and PVT Analysis\u00b6","text":""},{"location":"examples/3-chromatography/3b-Chromatography/#equilibrium-ratio-correlation","title":"Equilibrium ratio correlation\u00b6","text":""},{"location":"examples/3-chromatography/3b-Chromatography/#component-class","title":"Component Class\u00b6","text":"<p>Pvtpy provides a class for each Component storing their attritutes and applying some methods.</p>"},{"location":"examples/3-chromatography/3b-Chromatography/#example-5-2-ahmed-tarek-equation-of-state-and-pvt-analysis","title":"Example 5-2 - Ahmed Tarek, Equation of State and PVT Analysis\u00b6","text":""},{"location":"examples/3-chromatography/3b-Chromatography/#convergence-pressure","title":"Convergence Pressure\u00b6","text":""},{"location":"examples/3-chromatography/3b-Chromatography/#dew-point-example","title":"Dew point example\u00b6","text":"<p>Example 5-4 - Ahmed Tarek, Equation of State and PVT Analysis</p>"},{"location":"examples/3-chromatography/3b-Chromatography/#bubble-point-example","title":"Bubble Point Example\u00b6","text":"<p>Example 5-4 - Ahmed Tarek, Equation of State and PVT Analysis</p>"},{"location":"examples/3-chromatography/3c-Separators/","title":"Separator Calculations","text":"In\u00a0[30]: Copied! <pre>import pandas as pd\nimport numpy as np\nfrom pvtpy.compositional import Chromatography, Component, properties_df\nfrom pvtpy.units import Pressure, Temperature\n</pre> import pandas as pd import numpy as np from pvtpy.compositional import Chromatography, Component, properties_df from pvtpy.units import Pressure, Temperature In\u00a0[31]: Copied! <pre>properties_df.index\n</pre> properties_df.index Out[31]: <pre>Index(['methane', 'ethane', 'propane', 'isobutane', 'butane', 'isopentane',\n       'pentane', 'neopentane', 'n-hexane', '2-methyl-pentane',\n       '3-methyl-penthane', 'neohexane', '2-3-dimethyl-butane', 'n-heptane',\n       '2-methyl-hexane', '3-methyl-hexane', '3-ethylpentane',\n       '2-2-dimethyl-pentane', '2-4-dimethyl-pentane', '3-3-dimethyl-pentane',\n       'triptane', 'n-octane', 'isooctane', 'n-nonane', 'n-decane',\n       'cyclopentane', 'methylcyclopentane', 'cyclohexane',\n       'methylcyclohexane', 'ethylene', 'propylene', 'cis-2-butene',\n       'trans-2-butene', 'isobutene', '1-pentene', '1-2-butadiene',\n       '1-3-butadiene', 'isoprene', 'benzene', 'toluene', 'ethylbenzene',\n       'o-xylene', 'm-xylene', 'p-xylene', 'styrene', 'isopropylbenzene',\n       'methyl-alcohol', 'ethyl-alcohol', 'carbon-monixide', 'carbon-dioxide',\n       'hydrogen-sulfide', 'sulfur-dioxide', 'ammonia', 'hydrogen', 'oxygen',\n       'nitrogen', 'chlorine', 'water', 'n-undecane', 'n-dodecane',\n       'n-tridecane', 'n-tetradecane', 'n-pentadecane', 'n-hexadecane',\n       'n-heptadecane', 'n-octadecane', 'n-nonadecane', 'n-eicosane',\n       'n-heneicosane', 'n-docosane', 'n-tricosane', 'n-tetracosane'],\n      dtype='object', name='name')</pre> In\u00a0[32]: Copied! <pre>d1 = {\n    'comp': ['carbon-dioxide','nitrogen','methane','ethane','propane','isobutane','butane','isopentane','pentane','n-hexane'],\n    'mole_fraction':[0.0008,0.0164,0.2840,0.0716,0.1048,0.042,0.042,0.0191,0.01912,0.0405]\n}\n\nc7_plus = Component(\n    name = 'C7+', \n    molecular_weight=252,\n    specific_gravity = 0.8429,\n    mole_fraction=0.3597,   \n    critical_pressure=140,\n    critical_pressure_unit='psi',\n    critical_temperature=1279.8,\n    critical_temperature_unit='rankine',\n    params = {'acentric_factor':0.5067}\n)\n\nch1 = Chromatography()\nch1.from_df(pd.DataFrame(d1),name='comp')\nch1.plus_fraction = c7_plus\n\nch1.df()['mole_fraction']\n</pre> d1 = {     'comp': ['carbon-dioxide','nitrogen','methane','ethane','propane','isobutane','butane','isopentane','pentane','n-hexane'],     'mole_fraction':[0.0008,0.0164,0.2840,0.0716,0.1048,0.042,0.042,0.0191,0.01912,0.0405] }  c7_plus = Component(     name = 'C7+',      molecular_weight=252,     specific_gravity = 0.8429,     mole_fraction=0.3597,        critical_pressure=140,     critical_pressure_unit='psi',     critical_temperature=1279.8,     critical_temperature_unit='rankine',     params = {'acentric_factor':0.5067} )  ch1 = Chromatography() ch1.from_df(pd.DataFrame(d1),name='comp') ch1.plus_fraction = c7_plus  ch1.df()['mole_fraction'] Out[32]: <pre>carbon-dioxide    0.000800\nnitrogen          0.016400\nmethane           0.283994\nethane            0.071599\npropane           0.104798\nisobutane         0.041999\nbutane            0.041999\nisopentane        0.019100\npentane           0.019120\nn-hexane          0.040499\nC7+               0.359693\nName: mole_fraction, dtype: float64</pre> In\u00a0[33]: Copied! <pre>ma = ch1.apparent_molecular_weight()\nprint(f'Aparent Molecular weight {ma}')\n</pre> ma = ch1.apparent_molecular_weight() print(f'Aparent Molecular weight {ma}') <pre>Aparent Molecular weight 113.61639653206936\n</pre> In\u00a0[34]: Copied! <pre>rho = 44.794\n</pre> rho = 44.794 In\u00a0[35]: Copied! <pre>p1 = Pressure(value=400, unit='psi')\nt1 = Temperature(value=72, unit='farenheit')\n\nch1.equilibrium_ratios(p1,t1,method='whitson')\n</pre> p1 = Pressure(value=400, unit='psi') t1 = Temperature(value=72, unit='farenheit')  ch1.equilibrium_ratios(p1,t1,method='whitson') Out[35]: <pre>carbon-dioxide     2.794898\nnitrogen          30.262636\nmethane           12.523440\nethane             1.911981\npropane            0.489915\nisobutane          0.197277\nbutane             0.139279\nisopentane         0.057828\npentane            0.044560\nn-hexane           0.015517\nC7+                0.000017\nName: k, dtype: float64</pre> In\u00a0[36]: Copied! <pre>fsh1, phase1 = ch1.flash_calculations(p1,t1)\nfsh1.index.name = 'component'\nprint(fsh1)\nprint(fsh1[['xi','yi']].sum())\n</pre> fsh1, phase1 = ch1.flash_calculations(p1,t1) fsh1.index.name = 'component' print(fsh1) print(fsh1[['xi','yi']].sum()) <pre>                mole_fraction        xi        yi          k\ncomponent                                                   \ncarbon-dioxide       0.000800  0.000592  0.001301   2.198146\nnitrogen             0.016400  0.001713  0.051773  30.229625\nmethane              0.283994  0.069850  0.799758  11.449594\nethane               0.071599  0.063289  0.091612   1.447522\npropane              0.104798  0.130747  0.042300   0.323526\nisobutane            0.041999  0.056641  0.006735   0.118908\nbutane               0.041999  0.057502  0.004662   0.081068\nisopentane           0.019100  0.026688  0.000822   0.030816\npentane              0.019120  0.026801  0.000620   0.023133\nn-hexane             0.040499  0.057142  0.000414   0.007246\nC7+                  0.359693  0.509035  0.000002   0.000004\nxi    1.0\nyi    1.0\ndtype: float64\n</pre> In\u00a0[37]: Copied! <pre>moles_stage1 = ch1.phase_moles(p1,t1)\nmoles_stage1\n</pre> moles_stage1 = ch1.phase_moles(p1,t1) moles_stage1 Out[37]: <pre>{'liquid_moles': 0.706615190417923, 'gas_moles': 0.293384809582077}</pre> In\u00a0[38]: Copied! <pre>p2 = Pressure(value=350, unit='psi')\nt2 = Temperature(value=72, unit='farenheit')\n</pre> p2 = Pressure(value=350, unit='psi') t2 = Temperature(value=72, unit='farenheit') In\u00a0[39]: Copied! <pre>ch2 = Chromatography()\nch2.from_df(fsh1, mole_fraction='xi')\n\nc7_plus1 = Component(\n    name = 'C7+', \n    molecular_weight=252,\n    specific_gravity = 0.8429,\n    mole_fraction=fsh1.loc['C7+','xi'],   \n    critical_pressure=140,\n    critical_pressure_unit='psi',\n    critical_temperature=1279.8,\n    critical_temperature_unit='rankine',\n    params = {'acentric_factor':0.5067}\n)\nch2.plus_fraction = c7_plus1\n\n\nch2.df()['mole_fraction']\n</pre> ch2 = Chromatography() ch2.from_df(fsh1, mole_fraction='xi')  c7_plus1 = Component(     name = 'C7+',      molecular_weight=252,     specific_gravity = 0.8429,     mole_fraction=fsh1.loc['C7+','xi'],        critical_pressure=140,     critical_pressure_unit='psi',     critical_temperature=1279.8,     critical_temperature_unit='rankine',     params = {'acentric_factor':0.5067} ) ch2.plus_fraction = c7_plus1   ch2.df()['mole_fraction'] <pre>/Users/scuervo91/Documents/dev/pvtpy/pvtpy/compositional/chromatography.py:48: UserWarning: DataFrame columns are not unique, some columns will be omitted.\n  self.components = parse_obj_as(List[Component], _merged.to_dict(orient='records'))\n</pre> Out[39]: <pre>carbon-dioxide    0.000592\nnitrogen          0.001713\nmethane           0.069850\nethane            0.063289\npropane           0.130747\nisobutane         0.056641\nbutane            0.057502\nisopentane        0.026688\npentane           0.026801\nn-hexane          0.057142\nC7+               0.509035\nName: mole_fraction, dtype: float64</pre> In\u00a0[40]: Copied! <pre>moles_stage2 = ch2.phase_moles(p2,t2)\nmoles_stage2\n</pre> moles_stage2 = ch2.phase_moles(p2,t2) moles_stage2 Out[40]: <pre>{'liquid_moles': 0.9869509099020275, 'gas_moles': 0.013049090097972503}</pre> In\u00a0[41]: Copied! <pre>fsh2, phase2 = ch2.flash_calculations(p2,t2)\nfsh2.index.name = 'component'\nprint(fsh2)\nprint(fsh2[['xi','yi']].sum())\n</pre> fsh2, phase2 = ch2.flash_calculations(p2,t2) fsh2.index.name = 'component' print(fsh2) print(fsh2[['xi','yi']].sum()) <pre>                mole_fraction        xi        yi          k\ncomponent                                                   \ncarbon-dioxide       0.000592  0.000580  0.001458   2.512167\nnitrogen             0.001713  0.001191  0.041154  34.548143\nmethane              0.069850  0.060335  0.789504  13.085251\nethane               0.063289  0.062753  0.103813   1.654311\npropane              0.130747  0.131831  0.048744   0.369743\nisobutane            0.056641  0.057287  0.007785   0.135895\nbutane               0.057502  0.058191  0.005391   0.092649\nisopentane           0.026688  0.027029  0.000952   0.035219\npentane              0.026801  0.027145  0.000718   0.026438\nn-hexane             0.057142  0.057892  0.000479   0.008281\nC7+                  0.509035  0.515766  0.000002   0.000005\nxi    1.0\nyi    1.0\ndtype: float64\n</pre> In\u00a0[42]: Copied! <pre>p3 = Pressure(value=14.7, unit='psi')\nt3 = Temperature(value=60, unit='farenheit')\n</pre> p3 = Pressure(value=14.7, unit='psi') t3 = Temperature(value=60, unit='farenheit') In\u00a0[43]: Copied! <pre>ch3 = Chromatography()\nch3.from_df(fsh2.reset_index(),name = fsh2.index.name, mole_fraction='xi')\n\nc7_plus3 = Component(\n    name = 'C7+', \n    molecular_weight=252,\n    specific_gravity = 0.8429,\n    mole_fraction=fsh2.loc['C7+','xi'],   \n    critical_pressure=140,\n    critical_pressure_unit='psi',\n    critical_temperature=1279.8,\n    critical_temperature_unit='rankine',\n    params = {'acentric_factor':0.5067}\n)\nch3.plus_fraction = c7_plus3\n\n\nch3.df()['mole_fraction']\n</pre> ch3 = Chromatography() ch3.from_df(fsh2.reset_index(),name = fsh2.index.name, mole_fraction='xi')  c7_plus3 = Component(     name = 'C7+',      molecular_weight=252,     specific_gravity = 0.8429,     mole_fraction=fsh2.loc['C7+','xi'],        critical_pressure=140,     critical_pressure_unit='psi',     critical_temperature=1279.8,     critical_temperature_unit='rankine',     params = {'acentric_factor':0.5067} ) ch3.plus_fraction = c7_plus3   ch3.df()['mole_fraction'] <pre>/Users/scuervo91/Documents/dev/pvtpy/pvtpy/compositional/chromatography.py:48: UserWarning: DataFrame columns are not unique, some columns will be omitted.\n  self.components = parse_obj_as(List[Component], _merged.to_dict(orient='records'))\n</pre> Out[43]: <pre>carbon-dioxide    0.000580\nnitrogen          0.001191\nmethane           0.060335\nethane            0.062753\npropane           0.131831\nisobutane         0.057287\nbutane            0.058191\nisopentane        0.027029\npentane           0.027145\nn-hexane          0.057892\nC7+               0.515766\nName: mole_fraction, dtype: float64</pre> In\u00a0[44]: Copied! <pre>moles_stage3 = ch3.phase_moles(p3,t3)\nmoles_stage3\n</pre> moles_stage3 = ch3.phase_moles(p3,t3) moles_stage3 Out[44]: <pre>{'liquid_moles': 0.7146137415095994, 'gas_moles': 0.2853862584904005}</pre> In\u00a0[45]: Copied! <pre>fsh3, phase3 = ch3.flash_calculations(p3,t3)\nfsh3.index.name = 'component'\nprint(fsh3)\nprint(fsh3[['xi','yi']].sum())\n</pre> fsh3, phase3 = ch3.flash_calculations(p3,t3) fsh3.index.name = 'component' print(fsh3) print(fsh3[['xi','yi']].sum()) <pre>                mole_fraction        xi        yi           k\ncomponent                                                    \ncarbon-dioxide       0.000580  0.000038  0.001939   51.134100\nnitrogen             0.001191  0.000005  0.004161  778.464695\nmethane              0.060335  0.000729  0.209590  287.336282\nethane               0.062753  0.005989  0.204892   34.210574\npropane              0.131831  0.046825  0.344688    7.361205\nisobutane            0.057287  0.038984  0.103116    2.645045\nbutane               0.058191  0.047590  0.084736    1.780549\nisopentane           0.027029  0.029919  0.019790    0.661425\npentane              0.027145  0.031750  0.015615    0.491810\nn-hexane             0.057892  0.076449  0.011424    0.149439\nC7+                  0.515766  0.721721  0.000050    0.000069\nxi    1.0\nyi    1.0\ndtype: float64\n</pre> In\u00a0[46]: Copied! <pre>moles_stages = [moles_stage1,moles_stage2,moles_stage3]\n\nnl = 1\nfor i in moles_stages:\n    nl *= i['liquid_moles']\n    \nnv = 1 - nl \n\nprint(f'liquid Moles Stock Tank {nl}\\nLiberated Gas Moles {nv}')\n</pre> moles_stages = [moles_stage1,moles_stage2,moles_stage3]  nl = 1 for i in moles_stages:     nl *= i['liquid_moles']      nv = 1 - nl   print(f'liquid Moles Stock Tank {nl}\\nLiberated Gas Moles {nv}') <pre>liquid Moles Stock Tank 0.49836769662173136\nLiberated Gas Moles 0.5016323033782686\n</pre> In\u00a0[47]: Copied! <pre>ch4 = Chromatography()\nch4.from_df(fsh3.reset_index(),name = fsh3.index.name, mole_fraction='xi')\n\nc7_plus4 = Component(\n    name = 'C7+', \n    molecular_weight=252,\n    specific_gravity = 0.8429,\n    mole_fraction=fsh3.loc['C7+','xi'],   \n    critical_pressure=140,\n    critical_pressure_unit='psi',\n    critical_temperature=1279.8,\n    critical_temperature_unit='rankine',\n    params = {'acentric_factor':0.5067}\n)\nch4.plus_fraction = c7_plus4\n\n\nch4.df()['mole_fraction']\n</pre> ch4 = Chromatography() ch4.from_df(fsh3.reset_index(),name = fsh3.index.name, mole_fraction='xi')  c7_plus4 = Component(     name = 'C7+',      molecular_weight=252,     specific_gravity = 0.8429,     mole_fraction=fsh3.loc['C7+','xi'],        critical_pressure=140,     critical_pressure_unit='psi',     critical_temperature=1279.8,     critical_temperature_unit='rankine',     params = {'acentric_factor':0.5067} ) ch4.plus_fraction = c7_plus4   ch4.df()['mole_fraction'] <pre>/Users/scuervo91/Documents/dev/pvtpy/pvtpy/compositional/chromatography.py:48: UserWarning: DataFrame columns are not unique, some columns will be omitted.\n  self.components = parse_obj_as(List[Component], _merged.to_dict(orient='records'))\n</pre> Out[47]: <pre>carbon-dioxide    0.000038\nnitrogen          0.000005\nmethane           0.000729\nethane            0.005989\npropane           0.046825\nisobutane         0.038984\nbutane            0.047590\nisopentane        0.029919\npentane           0.031750\nn-hexane          0.076449\nC7+               0.721721\nName: mole_fraction, dtype: float64</pre> In\u00a0[48]: Copied! <pre>ch4.apparent_molecular_weight()\n</pre> ch4.apparent_molecular_weight() Out[48]: <pre>200.23335136754622</pre> In\u00a0[49]: Copied! <pre>## Separator Functions\n</pre> ## Separator Functions In\u00a0[50]: Copied! <pre>from pvtpy.compositional import Stage, SeparatorTest\n</pre> from pvtpy.compositional import Stage, SeparatorTest In\u00a0[51]: Copied! <pre>stage1 = Stage(\n    pressure=p1,\n    temperature = t1\n)\n\nstage2 = Stage(\n    pressure=p2,\n    temperature = t2\n)\n\nstage3 = Stage(\n    pressure=p3,\n    temperature = t3\n)\n\nlist_stages = [stage1, stage2, stage3]\n\nsep = SeparatorTest(\n    initial_chromatography = ch1,\n    stages = list_stages\n)\n</pre>  stage1 = Stage(     pressure=p1,     temperature = t1 )  stage2 = Stage(     pressure=p2,     temperature = t2 )  stage3 = Stage(     pressure=p3,     temperature = t3 )  list_stages = [stage1, stage2, stage3]  sep = SeparatorTest(     initial_chromatography = ch1,     stages = list_stages )  In\u00a0[52]: Copied! <pre>sep.solve()\n</pre> sep.solve() <pre>Stage 0\nStage 1\nStage 2\n</pre> Out[52]: <pre>True</pre> In\u00a0[53]: Copied! <pre>sep.stages[-1].phase_moles\n</pre> sep.stages[-1].phase_moles Out[53]: <pre>PhaseMoles(liquid_moles=0.7146137415095994, gas_moles=0.2853862584904005)</pre> <p>Calculate apparent molecular weight of the stock-tank oil from its composition, to give</p> In\u00a0[54]: Copied! <pre>sep.stages[-1].chromatography.apparent_molecular_weight()\n</pre> sep.stages[-1].chromatography.apparent_molecular_weight() Out[54]: <pre>200.23335136754622</pre> <p>Calculate the actual number of moles of the liquid phase at the stock-tank condi- tions</p> <p>Calculate the total number of moles of the liberated gas</p> In\u00a0[55]: Copied! <pre>sep.final_moles()\n</pre> sep.final_moles() Out[55]: <pre>PhaseMoles(liquid_moles=0.49836769662173136, gas_moles=0.5016323033782686)</pre> In\u00a0[56]: Copied! <pre>sep.final_molecular_weight()\n</pre> sep.final_molecular_weight() Out[56]: <pre>200.23335136754622</pre> In\u00a0[57]: Copied! <pre>rho = 50.920\nsep.gas_solubility(rho=50.920)\n</pre> rho = 50.920 sep.gas_solubility(rho=50.920) Out[57]: <pre>545.2989698764427</pre> In\u00a0[58]: Copied! <pre>sep.volumetric_factor(44.794,50.920)\n</pre> sep.volumetric_factor(44.794,50.920) Out[58]: <pre>1.2942651571380284</pre>"},{"location":"examples/3-chromatography/3c-Separators/#separator-calculations","title":"Separator Calculations\u00b6","text":""},{"location":"examples/3-chromatography/3c-Separators/#stage-1","title":"Stage 1\u00b6","text":""},{"location":"examples/3-chromatography/3c-Separators/#stage-2","title":"Stage 2\u00b6","text":""},{"location":"examples/3-chromatography/3c-Separators/#stage-3","title":"Stage 3\u00b6","text":""},{"location":"examples/4-Eos/1-van_der_walls/","title":"Van Der Walls","text":"In\u00a0[8]: Copied! <pre>from pvtpy.compositional import Component, component_from_name\nfrom pvtpy.units import Pressure, Temperature\nimport numpy as np\n</pre> from pvtpy.compositional import Component, component_from_name from pvtpy.units import Pressure, Temperature import numpy as np In\u00a0[9]: Copied! <pre>prop = component_from_name('propane')\nprop\n</pre> prop = component_from_name('propane') prop Out[9]: <pre>Component(name='propane', formula='C3H8', iupac_key='ATUOYWHBWRKTHZ-UHFFFAOYSA-N', iupac='1S/C3H8/c1-3-2/h3H2;1-2H3', cas='74-98-6', molecular_weight=44.097, specific_gravity=None, critical_pressure=Pressure(value=616.0, unit=&lt;PressureUnits.psi: 'psi'&gt;), critical_temperature=Temperature(value=206.06, unit=&lt;TemperatureUnits.farenheit: 'farenheit'&gt;), antoine_coefficients=Antoine(a=4.53678, b=1149.36, c=24.906), van_der_walls=VanDerWalls(a=None, b=None), redlich_kwong=RedlichKwong(a=None, b=None), soave_redlich_kwong=SoaveRedlichKwong(a=None, b=None, alpha=None, a_alpha=None), peng_robinson=PengRobinson(a=None, b=None, alpha=None, a_alpha=None), mole_fraction=None, params={'id': 3.0, 'acentric_factor': 0.1523})</pre> In\u00a0[10]: Copied! <pre>cp = prop.critical_properties()\ncp\n</pre> cp = prop.critical_properties() cp Out[10]: <pre>CriticalProperties(critical_pressure=Pressure(value=616.0, unit=&lt;PressureUnits.psi: 'psi'&gt;), critical_temperature=Temperature(value=206.06, unit=&lt;TemperatureUnits.farenheit: 'farenheit'&gt;))</pre> In\u00a0[11]: Copied! <pre>prop.van_der_walls.coef_ab(cp)\n</pre> prop.van_der_walls.coef_ab(cp) Out[11]: <pre>(34946.10506074155, 1.4495298092532467)</pre> In\u00a0[12]: Copied! <pre>p1 = Pressure(value = 185, unit='psi')\nt1 = Temperature(value = 100, unit='farenheit')\n\nprop.van_der_walls.coef_AB(p1,t1)\n</pre> p1 = Pressure(value = 185, unit='psi') t1 = Temperature(value = 100, unit='farenheit')  prop.van_der_walls.coef_AB(p1,t1) Out[12]: <pre>(0.17926974743405383, 0.04465469520072008)</pre> In\u00a0[13]: Copied! <pre>poly = prop.van_der_walls.cubic_poly(p1,t1)\npoly\n</pre> poly = prop.van_der_walls.cubic_poly(p1,t1) poly Out[13]:  $x \\mapsto \\text{-0.008005235930377745} + \\text{0.17926974743405383}\\,x - \\text{1.04465469520072}\\,x^{2} + \\text{1.0}\\,x^{3}$  In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[14]: Copied! <pre>ma = prop.molecular_weight\nrho = prop.van_der_walls.estimate_densities(p1,t1, molecular_weight=ma)\nrho\n</pre> ma = prop.molecular_weight rho = prop.van_der_walls.estimate_densities(p1,t1, molecular_weight=ma) rho Out[14]: <pre>{'rho_gas': 1.6108195257038465, 'rho_liquid': 18.025022053627083}</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/4-Eos/2-redlich_kwong/","title":"Redlich Kwong","text":"In\u00a0[1]: Copied! <pre>from pvtpy.compositional import Component, component_from_name\nfrom pvtpy.units import Pressure, Temperature\nimport numpy as np\n</pre> from pvtpy.compositional import Component, component_from_name from pvtpy.units import Pressure, Temperature import numpy as np In\u00a0[2]: Copied! <pre>prop = component_from_name('propane')\nprop.df()\n</pre> prop = component_from_name('propane') prop.df() Out[2]: <pre>formula                                        C3H8\niupac_key               ATUOYWHBWRKTHZ-UHFFFAOYSA-N\niupac                     1S/C3H8/c1-3-2/h3H2;1-2H3\ncas                                         74-98-6\nmolecular_weight                             44.097\nvan_der_walls                                    {}\nredlich_kwong                                    {}\nsoave_redlich_kwong                              {}\npeng_robinson                                    {}\ncritical_pressure                             616.0\ncritical_temperature                         206.06\nid                                              3.0\nacentric_factor                              0.1523\nName: propane, dtype: object</pre> In\u00a0[3]: Copied! <pre>cp = prop.critical_properties()\ncp\n</pre> cp = prop.critical_properties() cp Out[3]: <pre>CriticalProperties(critical_pressure=Pressure(value=616.0, unit=&lt;PressureUnits.psi: 'psi'&gt;), critical_temperature=Temperature(value=206.06, unit=&lt;TemperatureUnits.farenheit: 'farenheit'&gt;))</pre> In\u00a0[4]: Copied! <pre>coef = prop.redlich_kwong.coef_ab(cp)\ncoef\n</pre> coef = prop.redlich_kwong.coef_ab(cp) coef Out[4]: <pre>(913628.6150409831, 1.0046981013896104)</pre> In\u00a0[5]: Copied! <pre>p1 = Pressure(value = 185, unit='psi')\nt1 = Temperature(value = 100, unit='farenheit')\n\nA,B = prop.redlich_kwong.coef_AB(p1,t1)\nprint(A,B)\n</pre> p1 = Pressure(value = 185, unit='psi') t1 = Temperature(value = 100, unit='farenheit')  A,B = prop.redlich_kwong.coef_AB(p1,t1) print(A,B) <pre>0.1981125133542597 0.0309510623375231\n</pre> In\u00a0[6]: Copied! <pre>poly = prop.redlich_kwong.cubic_poly(p1,t1)\npoly\n</pre> poly = prop.redlich_kwong.cubic_poly(p1,t1) poly Out[6]:  $x \\mapsto \\text{-0.00613179275067107} + \\text{0.16620348275691535}\\,x - \\text{1.0}\\,x^{2} + \\text{1.0}\\,x^{3}$  In\u00a0[7]: Copied! <pre>ma = prop.molecular_weight\nrho = prop.redlich_kwong.estimate_densities(p1,t1, molecular_weight=ma)\nrho\n</pre> ma = prop.molecular_weight rho = prop.redlich_kwong.estimate_densities(p1,t1, molecular_weight=ma) rho Out[7]: <pre>{'rho_gas': 1.6930299733398178, 'rho_liquid': 25.750511328486244}</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/4-Eos/2a-redlich_kwong_mixtures/","title":"Redlich Kwong","text":"In\u00a0[17]: Copied! <pre>## Redlich_Kwong Equation - for Mixtures\nimport pandas as pd\nimport numpy as np\nfrom pvtpy.compositional import Chromatography, Component, properties_df\nfrom pvtpy.units import Pressure, Temperature\n</pre> ## Redlich_Kwong Equation - for Mixtures import pandas as pd import numpy as np from pvtpy.compositional import Chromatography, Component, properties_df from pvtpy.units import Pressure, Temperature In\u00a0[18]: Copied! <pre>d1 = {\n    'comp': ['methane','ethane','propane','butane','pentane','n-hexane'],\n    'mole_fraction':[0.45,0.05,0.05,0.03,0.01,0.01]\n}\n\nc7_plus = Component(\n    name = 'C7+', \n    molecular_weight=215,\n    mole_fraction=0.4,   \n    critical_pressure=285,\n    critical_pressure_unit='psi',\n    critical_temperature=1287,\n    critical_temperature_unit='rankine',\n\n)\n\nch1 = Chromatography()\nch1.from_df(pd.DataFrame(d1),name='comp')\nch1.plus_fraction = c7_plus\n\nch1.df()['mole_fraction']\n</pre> d1 = {     'comp': ['methane','ethane','propane','butane','pentane','n-hexane'],     'mole_fraction':[0.45,0.05,0.05,0.03,0.01,0.01] }  c7_plus = Component(     name = 'C7+',      molecular_weight=215,     mole_fraction=0.4,        critical_pressure=285,     critical_pressure_unit='psi',     critical_temperature=1287,     critical_temperature_unit='rankine',  )  ch1 = Chromatography() ch1.from_df(pd.DataFrame(d1),name='comp') ch1.plus_fraction = c7_plus  ch1.df()['mole_fraction'] Out[18]: <pre>methane     0.45\nethane      0.05\npropane     0.05\nbutane      0.03\npentane     0.01\nn-hexane    0.01\nC7+         0.40\nName: mole_fraction, dtype: float64</pre> In\u00a0[19]: Copied! <pre>ch1.redlich_kwong_components_coef()\n\nch1.df(columns=['mole_fraction','rk_a','rk_b'])\n</pre> ch1.redlich_kwong_components_coef()  ch1.df(columns=['mole_fraction','rk_a','rk_b']) Out[19]: mole_fraction rk_a rk_b methane 0.45 1.609183e+05 0.478495 ethane 0.05 4.932760e+05 0.723177 propane 0.05 9.136286e+05 1.004698 butane 0.03 1.448218e+06 1.292135 pentane 0.01 2.093616e+06 1.608655 n-hexane 0.01 2.839364e+06 1.943280 C7+ 0.40 1.026140e+07 4.198091 In\u00a0[20]: Copied! <pre>ch1.redlich_kwong_mix_coef()\n</pre> ch1.redlich_kwong_mix_coef() Out[20]: <pre>(2599136.1341489274, 2.0552362922703455)</pre> In\u00a0[21]: Copied! <pre>p1 = Pressure(value = 4000, unit='psi')\nt1 = Temperature(value = 160, unit='farenheit')\n\nma = ch1.apparent_molecular_weight()\nma\n</pre> p1 = Pressure(value = 4000, unit='psi') t1 = Temperature(value = 160, unit='farenheit')  ma = ch1.apparent_molecular_weight() ma Out[21]: <pre>100.264435</pre> In\u00a0[22]: Copied! <pre>df1 = ch1.df(columns=['mole_fraction','molecular_weight'])\nprint(df1)\n</pre> df1 = ch1.df(columns=['mole_fraction','molecular_weight']) print(df1) <pre>          mole_fraction  molecular_weight\nmethane            0.45           16.0425\nethane             0.05           30.0700\npropane            0.05           44.0970\nbutane             0.03           58.1230\npentane            0.01           73.1500\nn-hexane           0.01           86.1770\nC7+                0.40          215.0000\n</pre> In\u00a0[23]: Copied! <pre>A,B = ch1.redlich_kwong.coef_AB(p1,t1)\n\nprint(A,B)\n</pre> A,B = ch1.redlich_kwong.coef_AB(p1,t1)  print(A,B) <pre>9.446879948552613 1.2364072939404886\n</pre> In\u00a0[24]: Copied! <pre>poly = ch1.redlich_kwong.cubic_poly(p1,t1)\nprint(type(poly))\nprint(poly)\n</pre> poly = ch1.redlich_kwong.cubic_poly(p1,t1) print(type(poly)) print(poly) <pre>&lt;class 'numpy.polynomial.polynomial.Polynomial'&gt;\n-11.6801912733706 + 6.681769658102883\u00b7x\u00b9 - 1.0\u00b7x\u00b2 + 1.0\u00b7x\u00b3\n</pre> In\u00a0[25]: Copied! <pre>roots = poly.roots()\n\nroots[np.isreal(roots)].real\n</pre> roots = poly.roots()  roots[np.isreal(roots)].real Out[25]: <pre>array([1.55019215])</pre> In\u00a0[26]: Copied! <pre>ch1.redlich_kwong.estimate_densities(p1,t1, ma)\n</pre> ch1.redlich_kwong.estimate_densities(p1,t1, ma) Out[26]: <pre>{'rho': array([38.90999504])}</pre> In\u00a0[27]: Copied! <pre>d2 = {\n    'comp': ['methane','ethane','propane','butane','pentane','n-hexane'],\n    'mole_fraction':[0.86,0.05,0.05,0.02,0.01,0.005]\n}\n\nc7_plus2 = Component(\n    name = 'C7+', \n    molecular_weight=215,\n    mole_fraction=0.005,   \n    critical_pressure=285,\n    critical_pressure_unit='psi',\n    critical_temperature=1287,\n    critical_temperature_unit='rankine'\n)\n\nch2 = Chromatography()\nch2.from_df(pd.DataFrame(d2),name='comp')\nch2.plus_fraction = c7_plus2\n\nch2.df(columns=['mole_fraction'], normalize=False)\n</pre> d2 = {     'comp': ['methane','ethane','propane','butane','pentane','n-hexane'],     'mole_fraction':[0.86,0.05,0.05,0.02,0.01,0.005] }  c7_plus2 = Component(     name = 'C7+',      molecular_weight=215,     mole_fraction=0.005,        critical_pressure=285,     critical_pressure_unit='psi',     critical_temperature=1287,     critical_temperature_unit='rankine' )  ch2 = Chromatography() ch2.from_df(pd.DataFrame(d2),name='comp') ch2.plus_fraction = c7_plus2  ch2.df(columns=['mole_fraction'], normalize=False) Out[27]: mole_fraction methane 0.860 ethane 0.050 propane 0.050 butane 0.020 pentane 0.010 n-hexane 0.005 C7+ 0.005 In\u00a0[28]: Copied! <pre>ch2.redlich_kwong_components_coef()\n\nch2.df(columns=['mole_fraction','rk_a','rk_b'])\n</pre> ch2.redlich_kwong_components_coef()  ch2.df(columns=['mole_fraction','rk_a','rk_b']) Out[28]: mole_fraction rk_a rk_b methane 0.860 1.609183e+05 0.478495 ethane 0.050 4.932760e+05 0.723177 propane 0.050 9.136286e+05 1.004698 butane 0.020 1.448218e+06 1.292135 pentane 0.010 2.093616e+06 1.608655 n-hexane 0.005 2.839364e+06 1.943280 C7+ 0.005 1.026140e+07 4.198091 In\u00a0[29]: Copied! <pre>ma2 = ch2.apparent_molecular_weight()\nma2\n</pre> ma2 = ch2.apparent_molecular_weight() ma2 Out[29]: <pre>20.904745</pre> In\u00a0[30]: Copied! <pre>ch2.redlich_kwong_mix_coef()\n</pre> ch2.redlich_kwong_mix_coef() Out[30]: <pre>(240957.42827545686, 0.570535481591962)</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[31]: Copied! <pre>p2 = Pressure(value = 4000, unit='psi')\nt2 = Temperature(value = 160, unit='farenheit')\nch2.redlich_kwong.estimate_densities(p2,t2, ma2)\n</pre> p2 = Pressure(value = 4000, unit='psi') t2 = Temperature(value = 160, unit='farenheit') ch2.redlich_kwong.estimate_densities(p2,t2, ma2) Out[31]: <pre>{'rho': array([13.85246264])}</pre> In\u00a0[32]: Copied! <pre>ch2.redlich_kwong.cubic_poly(p2,t2)\n</pre> ch2.redlich_kwong.cubic_poly(p2,t2) Out[32]:  $x \\mapsto \\text{-0.3005952718766425} + \\text{0.4147562859938712}\\,x - \\text{1.0}\\,x^{2} + \\text{1.0}\\,x^{3}$  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/4-Eos/2a-redlich_kwong_mixtures/#liquid-hydrocarbon-mixture","title":"Liquid Hydrocarbon Mixture\u00b6","text":""},{"location":"examples/4-Eos/2a-redlich_kwong_mixtures/#gas-hydrocarbon-mixture","title":"Gas Hydrocarbon Mixture\u00b6","text":""},{"location":"examples/4-Eos/3-soave_redlich_kwong/","title":"Soave Redlich Kwong","text":"In\u00a0[1]: Copied! <pre>from pvtpy.compositional import Component, component_from_name\nfrom pvtpy.units import Pressure, Temperature\nimport numpy as np\nimport pandas as pd\n</pre> from pvtpy.compositional import Component, component_from_name from pvtpy.units import Pressure, Temperature import numpy as np import pandas as pd In\u00a0[2]: Copied! <pre>prop = component_from_name('propane')\nprop.df()\n</pre> prop = component_from_name('propane') prop.df() Out[2]: <pre>formula                                        C3H8\niupac_key               ATUOYWHBWRKTHZ-UHFFFAOYSA-N\niupac                     1S/C3H8/c1-3-2/h3H2;1-2H3\ncas                                         74-98-6\nmolecular_weight                             44.097\nvan_der_walls                                    {}\nredlich_kwong                                    {}\nsoave_redlich_kwong                              {}\npeng_robinson                                    {}\ncritical_pressure                             616.0\ncritical_temperature                         206.06\nid                                              3.0\nacentric_factor                              0.1523\nName: propane, dtype: object</pre> In\u00a0[3]: Copied! <pre>cp = prop.critical_properties()\ncp\n</pre> cp = prop.critical_properties() cp Out[3]: <pre>CriticalProperties(critical_pressure=Pressure(value=616.0, unit=&lt;PressureUnits.psi: 'psi'&gt;), critical_temperature=Temperature(value=206.06, unit=&lt;TemperatureUnits.farenheit: 'farenheit'&gt;))</pre> In\u00a0[4]: Copied! <pre>coef = prop.soave_redlich_kwong.coef_ab(cp)\ncoef\n</pre> coef = prop.soave_redlich_kwong.coef_ab(cp) coef Out[4]: <pre>(35409.56807185824, 1.0046981013896104)</pre> In\u00a0[5]: Copied! <pre>p1 = Pressure(value = 185, unit='psi')\nt1 = Temperature(value = 100, unit='farenheit')\n</pre> p1 = Pressure(value = 185, unit='psi') t1 = Temperature(value = 100, unit='farenheit') In\u00a0[6]: Copied! <pre>omega = prop.params['acentric_factor']\n\nprop.soave_redlich_kwong.coef_alpha(t1,cp, omega)\n</pre> omega = prop.params['acentric_factor']  prop.soave_redlich_kwong.coef_alpha(t1,cp, omega) Out[6]: <pre>1.1224917092791513</pre> In\u00a0[7]: Copied! <pre>A,B = prop.soave_redlich_kwong.coef_AB(p1,t1)\nprint(A,B)\n</pre> A,B = prop.soave_redlich_kwong.coef_AB(p1,t1) print(A,B) <pre>0.2038975463516234 0.0309510623375231\n</pre> In\u00a0[8]: Copied! <pre>poly = prop.soave_redlich_kwong.cubic_poly(p1,t1)\npoly\n</pre> poly = prop.soave_redlich_kwong.cubic_poly(p1,t1) poly Out[8]:  $x \\mapsto \\text{-0.006310845667597102} + \\text{0.17198851575427906}\\,x - \\text{1.0}\\,x^{2} + \\text{1.0}\\,x^{3}$  In\u00a0[9]: Copied! <pre>poly.roots()\n</pre> poly.roots() Out[9]: <pre>array([0.05110012, 0.15569748, 0.7932024 ])</pre> In\u00a0[10]: Copied! <pre>ma = prop.molecular_weight\nrho = prop.soave_redlich_kwong.estimate_densities(p1,t1, molecular_weight=ma)\nrho\n</pre> ma = prop.molecular_weight rho = prop.soave_redlich_kwong.estimate_densities(p1,t1, molecular_weight=ma) rho Out[10]: <pre>{'rho_gas': 1.712635751626581, 'rho_liquid': 26.584412239429383}</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/4-Eos/3a-soave_redlich_kwong_mixtures/","title":"Soave Redlich Kwong","text":"In\u00a0[1]: Copied! <pre>## Redlich_Kwong Equation - for Mixtures\nimport pandas as pd\nimport numpy as np\nfrom pvtpy.compositional import Chromatography, Component, properties_df\nfrom pvtpy.units import Pressure, Temperature\n</pre> ## Redlich_Kwong Equation - for Mixtures import pandas as pd import numpy as np from pvtpy.compositional import Chromatography, Component, properties_df from pvtpy.units import Pressure, Temperature In\u00a0[2]: Copied! <pre>d1 = {\n    'comp': ['methane','ethane','propane','butane','pentane','n-hexane'],\n    'mole_fraction':[0.45,0.05,0.05,0.03,0.01,0.01]\n}\n\nc7_plus = Component(\n    name = 'C7+', \n    molecular_weight=215,\n    mole_fraction=0.4,   \n    critical_pressure=285,\n    critical_pressure_unit='psi',\n    critical_temperature=700,\n    critical_temperature_unit='farenheit',\n    params={'acentric_factor':0.52}\n)\n\nch1 = Chromatography()\nch1.from_df(pd.DataFrame(d1),name='comp')\nch1.plus_fraction = c7_plus\n\nch1.df(columns=['mole_fraction','acentric_factor'])\n</pre> d1 = {     'comp': ['methane','ethane','propane','butane','pentane','n-hexane'],     'mole_fraction':[0.45,0.05,0.05,0.03,0.01,0.01] }  c7_plus = Component(     name = 'C7+',      molecular_weight=215,     mole_fraction=0.4,        critical_pressure=285,     critical_pressure_unit='psi',     critical_temperature=700,     critical_temperature_unit='farenheit',     params={'acentric_factor':0.52} )  ch1 = Chromatography() ch1.from_df(pd.DataFrame(d1),name='comp') ch1.plus_fraction = c7_plus  ch1.df(columns=['mole_fraction','acentric_factor']) Out[2]: mole_fraction acentric_factor methane 0.45 0.0115 ethane 0.05 0.0995 propane 0.05 0.1523 butane 0.03 0.2002 pentane 0.01 0.2515 n-hexane 0.01 0.3013 C7+ 0.40 0.5200 In\u00a0[3]: Copied! <pre>p1 = Pressure(value = 4000, unit='psi')\nt1 = Temperature(value = 160, unit='farenheit')\n</pre> p1 = Pressure(value = 4000, unit='psi') t1 = Temperature(value = 160, unit='farenheit') In\u00a0[4]: Copied! <pre>ch1.soave_redlich_kwong_components_coef(t1)\n\n\nch1.df(columns=['mole_fraction','srk_a','srk_b','srk_alpha', 'acentric_factor'])\n</pre> ch1.soave_redlich_kwong_components_coef(t1)   ch1.df(columns=['mole_fraction','srk_a','srk_b','srk_alpha', 'acentric_factor']) Out[4]: mole_fraction srk_a srk_b srk_alpha acentric_factor methane 0.45 8688.770713 0.478495 0.686593 0.0115 ethane 0.05 21041.202832 0.723177 0.923015 0.0995 propane 0.05 35409.568072 1.004698 1.051035 0.1523 butane 0.03 52350.514587 1.292135 1.164088 0.2002 pentane 0.01 72002.574726 1.608655 1.264327 0.2515 n-hexane 0.01 93955.330354 1.943280 1.358148 0.3013 C7+ 0.40 232235.747155 3.782751 1.489631 0.5200 In\u00a0[5]: Copied! <pre>ch1.soave_redlich_kwong_mix_coef()\n</pre> ch1.soave_redlich_kwong_mix_coef() Out[5]: <pre>(90381.12778928163, 1.8891001828303455)</pre> In\u00a0[6]: Copied! <pre>ma = ch1.apparent_molecular_weight()\nma\n</pre>   ma = ch1.apparent_molecular_weight() ma Out[6]: <pre>100.264435</pre> In\u00a0[7]: Copied! <pre>ch1.soave_redlich_kwong.alpha\n</pre> ch1.soave_redlich_kwong.alpha In\u00a0[8]: Copied! <pre>A,B = ch1.soave_redlich_kwong.coef_AB(p1,t1)\n\nprint(A,B)\n</pre> A,B = ch1.soave_redlich_kwong.coef_AB(p1,t1)  print(A,B) <pre>8.177439904015678 1.1364616583602605\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[9]: Copied! <pre>poly = ch1.soave_redlich_kwong.cubic_poly(p1,t1)\nprint(type(poly))\nprint(poly)\n</pre> poly = ch1.soave_redlich_kwong.cubic_poly(p1,t1) print(type(poly)) print(poly) <pre>&lt;class 'numpy.polynomial.polynomial.Polynomial'&gt;\n-9.293346914459027 + 5.749433144732464\u00b7x\u00b9 - 1.0\u00b7x\u00b2 + 1.0\u00b7x\u00b3\n</pre> In\u00a0[10]: Copied! <pre>roots = poly.roots()\nprint(roots)\nroots[np.isreal(roots)].real\n</pre> roots = poly.roots() print(roots) roots[np.isreal(roots)].real <pre>[-0.22557549-2.52056284j -0.22557549+2.52056284j  1.45115098+0.j        ]\n</pre> Out[10]: <pre>array([1.45115098])</pre> In\u00a0[11]: Copied! <pre>ch1.soave_redlich_kwong.estimate_densities(p1,t1, ma)\n</pre> ch1.soave_redlich_kwong.estimate_densities(p1,t1, ma) Out[11]: <pre>{'rho': array([41.56560542])}</pre> In\u00a0[12]: Copied! <pre>d2 = {\n    'comp': ['methane','ethane','propane','butane','pentane','n-hexane'],\n    'mole_fraction':[0.86,0.05,0.05,0.02,0.01,0.005]\n}\n\nc7_plus2 = Component(\n    name = 'C7+', \n    molecular_weight=215,\n    mole_fraction=0.0005,   \n    critical_pressure=285,\n    critical_pressure_unit='psi',\n    critical_temperature=700,\n    critical_temperature_unit='farenheit',\n    params={'acentric_factor':0.52}\n)\n\nch2 = Chromatography()\nch2.from_df(pd.DataFrame(d2),name='comp')\nch2.plus_fraction = c7_plus2\n\nch2.df(columns=['mole_fraction'], normalize=True)\n</pre> d2 = {     'comp': ['methane','ethane','propane','butane','pentane','n-hexane'],     'mole_fraction':[0.86,0.05,0.05,0.02,0.01,0.005] }  c7_plus2 = Component(     name = 'C7+',      molecular_weight=215,     mole_fraction=0.0005,        critical_pressure=285,     critical_pressure_unit='psi',     critical_temperature=700,     critical_temperature_unit='farenheit',     params={'acentric_factor':0.52} )  ch2 = Chromatography() ch2.from_df(pd.DataFrame(d2),name='comp') ch2.plus_fraction = c7_plus2  ch2.df(columns=['mole_fraction'], normalize=True) Out[12]: mole_fraction methane 0.863887 ethane 0.050226 propane 0.050226 butane 0.020090 pentane 0.010045 n-hexane 0.005023 C7+ 0.000502 In\u00a0[13]: Copied! <pre>ch2.soave_redlich_kwong_components_coef(t1)\n\nch2.df(columns=['mole_fraction','srk_a','srk_b'])\n</pre> ch2.soave_redlich_kwong_components_coef(t1)  ch2.df(columns=['mole_fraction','srk_a','srk_b']) Out[13]: mole_fraction srk_a srk_b methane 0.863887 8688.770713 0.478495 ethane 0.050226 21041.202832 0.723177 propane 0.050226 35409.568072 1.004698 butane 0.020090 52350.514587 1.292135 pentane 0.010045 72002.574726 1.608655 n-hexane 0.005023 93955.330354 1.943280 C7+ 0.000502 232235.747155 3.782751 In\u00a0[14]: Copied! <pre>ma2 = ch2.apparent_molecular_weight()\nma2\n</pre> ma2 = ch2.apparent_molecular_weight() ma2 Out[14]: <pre>20.027368156705165</pre> In\u00a0[15]: Copied! <pre>ch2.soave_redlich_kwong_mix_coef()\n</pre> ch2.soave_redlich_kwong_mix_coef() Out[15]: <pre>(8741.036982505435, 0.5539290826470736)</pre> In\u00a0[16]: Copied! <pre>A,B = ch2.soave_redlich_kwong.coef_AB(p1,t1)\n\nprint(A,B)\n</pre> A,B = ch2.soave_redlich_kwong.coef_AB(p1,t1)  print(A,B) <pre>0.7908653761199639 0.3332375750109206\n</pre> In\u00a0[17]: Copied! <pre>poly = ch2.soave_redlich_kwong.cubic_poly(p1,t1)\nprint(type(poly))\nprint(poly)\n</pre> poly = ch2.soave_redlich_kwong.cubic_poly(p1,t1) print(type(poly)) print(poly) <pre>&lt;class 'numpy.polynomial.polynomial.Polynomial'&gt;\n-0.2635460600983164 + 0.34658051970988435\u00b7x\u00b9 - 1.0\u00b7x\u00b2 + 1.0\u00b7x\u00b3\n</pre> In\u00a0[18]: Copied! <pre>poly.roots()\n</pre> poly.roots() Out[18]: <pre>array([0.03418411-0.53077109j, 0.03418411+0.53077109j,\n       0.93163177+0.j        ])</pre> In\u00a0[19]: Copied! <pre>p2 = Pressure(value = 4000, unit='psi')\nt2 = Temperature(value = 160, unit='farenheit')\nch2.soave_redlich_kwong.estimate_densities(p2,t2, ma2)\n</pre> p2 = Pressure(value = 4000, unit='psi') t2 = Temperature(value = 160, unit='farenheit') ch2.soave_redlich_kwong.estimate_densities(p2,t2, ma2) Out[19]: <pre>{'rho': array([12.93240769])}</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/4-Eos/3a-soave_redlich_kwong_mixtures/#liquid-hydrocarbon-mixture","title":"Liquid Hydrocarbon Mixture\u00b6","text":""},{"location":"examples/4-Eos/3a-soave_redlich_kwong_mixtures/#gas-hydrocarbon-mixture","title":"Gas Hydrocarbon Mixture\u00b6","text":""},{"location":"examples/4-Eos/4a-peng_robinzon_mixtures/","title":"4a peng robinzon mixtures","text":"In\u00a0[1]: Copied! <pre>## Redlich_Kwong Equation - for Mixtures\nimport pandas as pd\nimport numpy as np\nfrom pvtpy.compositional import Chromatography, Component, properties_df\nfrom pvtpy.units import Pressure, Temperature\n</pre> ## Redlich_Kwong Equation - for Mixtures import pandas as pd import numpy as np from pvtpy.compositional import Chromatography, Component, properties_df from pvtpy.units import Pressure, Temperature In\u00a0[2]: Copied! <pre>d1 = {\n    'comp': ['methane','ethane','propane','butane','pentane','n-hexane'],\n    'mole_fraction':[0.45,0.05,0.05,0.03,0.01,0.01]\n}\n\nc7_plus = Component(\n    name = 'C7+', \n    molecular_weight=215,\n    mole_fraction=0.4,   \n    critical_pressure=285,\n    critical_pressure_unit='psi',\n    critical_temperature=700,\n    critical_temperature_unit='farenheit',\n    params={'acentric_factor':0.52}\n)\n\nch1 = Chromatography()\nch1.from_df(pd.DataFrame(d1),name='comp')\nch1.plus_fraction = c7_plus\n\nch1.df(columns=['mole_fraction','acentric_factor'])\n</pre> d1 = {     'comp': ['methane','ethane','propane','butane','pentane','n-hexane'],     'mole_fraction':[0.45,0.05,0.05,0.03,0.01,0.01] }  c7_plus = Component(     name = 'C7+',      molecular_weight=215,     mole_fraction=0.4,        critical_pressure=285,     critical_pressure_unit='psi',     critical_temperature=700,     critical_temperature_unit='farenheit',     params={'acentric_factor':0.52} )  ch1 = Chromatography() ch1.from_df(pd.DataFrame(d1),name='comp') ch1.plus_fraction = c7_plus  ch1.df(columns=['mole_fraction','acentric_factor']) Out[2]: mole_fraction acentric_factor methane 0.45 0.0115 ethane 0.05 0.0995 propane 0.05 0.1523 butane 0.03 0.2002 pentane 0.01 0.2515 n-hexane 0.01 0.3013 C7+ 0.40 0.5200 In\u00a0[3]: Copied! <pre>p1 = Pressure(value = 4000, unit='psi')\nt1 = Temperature(value = 160, unit='farenheit')\n</pre> p1 = Pressure(value = 4000, unit='psi') t1 = Temperature(value = 160, unit='farenheit') In\u00a0[4]: Copied! <pre>ch1.peng_robinson_components_coef(t1)\n\n\nch1.df(columns=['mole_fraction','pr_a','pr_b','pr_alpha', 'acentric_factor'])\n</pre> ch1.peng_robinson_components_coef(t1)   ch1.df(columns=['mole_fraction','pr_a','pr_b','pr_alpha', 'acentric_factor']) Out[4]: mole_fraction pr_a pr_b pr_alpha acentric_factor methane 0.45 9293.876812 0.429673 0.745265 0.0115 ethane 0.05 22506.560888 0.649391 0.935474 0.0995 propane 0.05 37875.572333 0.902187 1.043294 0.1523 butane 0.03 55996.325566 1.160297 1.140322 0.2002 pentane 0.01 77017.000650 1.444522 1.227601 0.2515 n-hexane 0.01 100498.596981 1.745004 1.309894 0.3013 C7+ 0.40 248409.182000 3.396791 1.429517 0.5200 In\u00a0[5]: Copied! <pre>ch1.peng_robinson_mix_coef()\n</pre> ch1.peng_robinson_mix_coef()  Out[5]: <pre>(94428.51808291777, 1.6963526572507028)</pre> In\u00a0[6]: Copied! <pre>ma = ch1.apparent_molecular_weight()\nma\n</pre> ma = ch1.apparent_molecular_weight() ma Out[6]: <pre>100.264435</pre> In\u00a0[7]: Copied! <pre>ch1.peng_robinson.alpha\n</pre> ch1.peng_robinson.alpha In\u00a0[8]: Copied! <pre>A,B = ch1.peng_robinson.coef_AB(p1,t1)\n\nprint(A,B)\n</pre> A,B = ch1.peng_robinson.coef_AB(p1,t1)  print(A,B) <pre>8.543636827022327 1.0205068908175008\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[9]: Copied! <pre>poly = ch1.peng_robinson.cubic_poly(p1,t1)\nprint(type(poly))\nprint(poly)\n</pre> poly = ch1.peng_robinson.cubic_poly(p1,t1) print(type(poly)) print(poly) <pre>&lt;class 'numpy.polynomial.polynomial.Polynomial'&gt;\n-6.614615046431426 + 3.378320102769318\u00b7x\u00b9 + 0.02050689081750079\u00b7x\u00b2 +\n1.0\u00b7x\u00b3\n</pre> In\u00a0[10]: Copied! <pre>roots = poly.roots()\nprint(roots)\nroots[np.isreal(roots)].real\n</pre> roots = poly.roots() print(roots) roots[np.isreal(roots)].real <pre>[-0.65973225-2.15800879j -0.65973225+2.15800879j  1.29895761+0.j        ]\n</pre> Out[10]: <pre>array([1.29895761])</pre> In\u00a0[11]: Copied! <pre>ch1.peng_robinson.estimate_densities(p1,t1, ma)\n</pre> ch1.peng_robinson.estimate_densities(p1,t1, ma) Out[11]: <pre>{'rho': array([46.43567139])}</pre> In\u00a0[12]: Copied! <pre>d2 = {\n    'comp': ['methane','ethane','propane','butane','pentane','n-hexane'],\n    'mole_fraction':[0.86,0.05,0.05,0.02,0.01,0.005]\n}\n\nc7_plus2 = Component(\n    name = 'C7+', \n    molecular_weight=215,\n    mole_fraction=0.0005,   \n    critical_pressure=285,\n    critical_pressure_unit='psi',\n    critical_temperature=700,\n    critical_temperature_unit='farenheit',\n    params={'acentric_factor':0.52}\n)\n\nch2 = Chromatography()\nch2.from_df(pd.DataFrame(d2),name='comp')\nch2.plus_fraction = c7_plus2\n\nch2.df(columns=['mole_fraction'], normalize=True)\n</pre> d2 = {     'comp': ['methane','ethane','propane','butane','pentane','n-hexane'],     'mole_fraction':[0.86,0.05,0.05,0.02,0.01,0.005] }  c7_plus2 = Component(     name = 'C7+',      molecular_weight=215,     mole_fraction=0.0005,        critical_pressure=285,     critical_pressure_unit='psi',     critical_temperature=700,     critical_temperature_unit='farenheit',     params={'acentric_factor':0.52} )  ch2 = Chromatography() ch2.from_df(pd.DataFrame(d2),name='comp') ch2.plus_fraction = c7_plus2  ch2.df(columns=['mole_fraction'], normalize=True) Out[12]: mole_fraction methane 0.863887 ethane 0.050226 propane 0.050226 butane 0.020090 pentane 0.010045 n-hexane 0.005023 C7+ 0.000502 In\u00a0[13]: Copied! <pre>ch2.peng_robinson_components_coef(t1)\n\nch2.df(columns=['mole_fraction','pr_a','pr_b'])\n</pre> ch2.peng_robinson_components_coef(t1)  ch2.df(columns=['mole_fraction','pr_a','pr_b']) Out[13]: mole_fraction pr_a pr_b methane 0.863887 9293.876812 0.429673 ethane 0.050226 22506.560888 0.649391 propane 0.050226 37875.572333 0.902187 butane 0.020090 55996.325566 1.160297 pentane 0.010045 77017.000650 1.444522 n-hexane 0.005023 100498.596981 1.745004 C7+ 0.000502 248409.182000 3.396791 In\u00a0[14]: Copied! <pre>ma2 = ch2.apparent_molecular_weight()\nma2\n</pre> ma2 = ch2.apparent_molecular_weight() ma2 Out[14]: <pre>20.027368156705165</pre> In\u00a0[15]: Copied! <pre>ch2.peng_robinson_mix_coef()\n</pre> ch2.peng_robinson_mix_coef() Out[15]: <pre>(9891.519125456765, 0.49741092601503156)</pre> In\u00a0[16]: Copied! <pre>A,B = ch2.peng_robinson.coef_AB(p1,t1)\n\nprint(A,B)\n</pre> A,B = ch2.peng_robinson.coef_AB(p1,t1)  print(A,B) <pre>0.8949578876292457 0.29923688060768266\n</pre> In\u00a0[17]: Copied! <pre>poly = ch2.peng_robinson.cubic_poly(p1,t1)\nprint(type(poly))\nprint(poly)\n</pre> poly = ch2.peng_robinson.cubic_poly(p1,t1) print(type(poly)) print(poly) <pre>&lt;class 'numpy.polynomial.polynomial.Polynomial'&gt;\n-0.15146721441784286 + 0.027855994266430817\u00b7x\u00b9 - 0.7007631193923174\u00b7x\u00b2 +\n1.0\u00b7x\u00b3\n</pre> In\u00a0[18]: Copied! <pre>poly.roots()\n</pre> poly.roots() Out[18]: <pre>array([-0.0842181 -0.40886175j, -0.0842181 +0.40886175j,\n        0.86919932+0.j        ])</pre> In\u00a0[19]: Copied! <pre>p2 = Pressure(value = 4000, unit='psi')\nt2 = Temperature(value = 160, unit='farenheit')\nch2.peng_robinson.estimate_densities(p2,t2, ma2)\n</pre> p2 = Pressure(value = 4000, unit='psi') t2 = Temperature(value = 160, unit='farenheit') ch2.peng_robinson.estimate_densities(p2,t2, ma2) Out[19]: <pre>{'rho': array([13.86131085])}</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/4-Eos/4a-peng_robinzon_mixtures/#liquid-hydrocarbon-mixture","title":"Liquid Hydrocarbon Mixture\u00b6","text":""},{"location":"examples/4-Eos/4a-peng_robinzon_mixtures/#gas-hydrocarbon-mixture","title":"Gas Hydrocarbon Mixture\u00b6","text":""},{"location":"examples/old_examples/Water_pvt/","title":"Make a water object","text":"In\u00a0[1]: Copied! <pre>import os\npath = os.path.abspath(os.path.join('..','..'))\nimport sys\nsys.path.append(path)\nfrom reservoirpy.pvtpy import black_oil as bl\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n</pre> import os path = os.path.abspath(os.path.join('..','..')) import sys sys.path.append(path) from reservoirpy.pvtpy import black_oil as bl import pandas as pd import numpy as np import matplotlib.pyplot as plt import pandas as pd  In\u00a0[24]: Copied! <pre>wa1 = bl.water(formation='fm_1',pb=2000,salinity=13500, temp=60)\n</pre> wa1 = bl.water(formation='fm_1',pb=2000,salinity=13500, temp=60) In\u00a0[25]: Copied! <pre>wa1.correlations\n</pre> wa1.correlations Out[25]: <pre>{'rsw': 'culberson',\n 'cw': 'standing',\n 'bw': 'mccain',\n 'rhow': 'banzer',\n 'muw': 'van_wingen'}</pre> In\u00a0[26]: Copied! <pre>wa1.pvt_from_correlations()\n</pre> wa1.pvt_from_correlations() In\u00a0[27]: Copied! <pre>wa1.pvt\n</pre> wa1.pvt Out[27]: rsw cw bw muw rhow pressure 20.000000 4.851603 0.000003 0.999977 1.205569 62.986943 282.105263 6.436610 0.000003 0.999851 1.205569 62.994844 544.210526 7.973368 0.000003 0.999693 1.205569 63.004787 806.315789 9.461877 0.000003 0.999503 1.205569 63.016777 1068.421053 10.902137 0.000003 0.999281 1.205569 63.030814 1330.526316 12.294148 0.000003 0.999026 1.205569 63.046901 1592.631579 13.637910 0.000003 0.998738 1.205569 63.065043 1854.736842 14.933422 0.000003 0.998418 1.205569 63.085242 2116.842105 16.180686 0.000003 0.997838 1.205569 63.121969 2378.947368 17.379700 0.000003 0.996964 1.205569 63.177301 2641.052632 18.530465 0.000003 0.996091 1.205569 63.232626 2903.157895 19.632981 0.000003 0.995222 1.205569 63.287855 3165.263158 20.687248 0.000003 0.994357 1.205569 63.342900 3427.368421 21.693266 0.000003 0.993498 1.205569 63.397676 3689.473684 22.651035 0.000003 0.992646 1.205569 63.452099 3951.578947 23.560555 0.000003 0.991802 1.205569 63.506089 4213.684211 24.421826 0.000003 0.990968 1.205569 63.559566 4475.789474 25.234847 0.000003 0.990144 1.205569 63.612452 4737.894737 25.999620 0.000003 0.989332 1.205569 63.664674 5000.000000 26.716143 0.000003 0.988532 1.205569 63.716157 In\u00a0[29]: Copied! <pre>wa1.pvt.interpolate(2500)\n</pre> wa1.pvt.interpolate(2500) Out[29]: rsw cw bw muw rhow pressure 2500 17.911178 0.000003 0.996561 1.205569 63.202853 In\u00a0[5]: Copied! <pre>s = 20000\np = 5000\nt = 200\nrsw = 17.8\np_range = np.linspace(1000,5000,10)\n</pre> s = 20000 p = 5000 t = 200 rsw = 17.8 p_range = np.linspace(1000,5000,10) In\u00a0[6]: Copied! <pre>bl.rsw(p=p_range,t=t,s=s,method=['culberson','mccoy'])\n</pre> bl.rsw(p=p_range,t=t,s=s,method=['culberson','mccoy']) Out[6]: rws_culberson rsw_mccoy pressure 1000.000000 6.162260 6.403561 1444.444444 8.018636 8.392001 1888.888889 9.796002 10.197900 2333.333333 11.494358 11.821259 2777.777778 13.113703 13.262078 3222.222222 14.654038 14.520356 3666.666667 16.115362 15.596093 4111.111111 17.497676 16.489290 4555.555556 18.800979 17.199946 5000.000000 20.025272 17.728061 In\u00a0[23]: Copied! <pre>bl.bw(p=3600,pb=2000,cw=3.6e-6,t=t,s=s,method='mccain')\n</pre> bl.bw(p=3600,pb=2000,cw=3.6e-6,t=t,s=s,method='mccain') Out[23]: bw pressure 3600 1.030689 In\u00a0[16]: Copied! <pre>np.full(10,3.6e-6)\n</pre> np.full(10,3.6e-6) Out[16]: <pre>array([3.6e-06, 3.6e-06, 3.6e-06, 3.6e-06, 3.6e-06, 3.6e-06, 3.6e-06,\n       3.6e-06, 3.6e-06, 3.6e-06])</pre> In\u00a0[\u00a0]: Copied! <pre>bl.cw(p=p_range,t=t,s=s,rsw=rsw,method=['standing','osif'])\n</pre> bl.cw(p=p_range,t=t,s=s,rsw=rsw,method=['standing','osif']) In\u00a0[\u00a0]: Copied! <pre>s\n</pre> s In\u00a0[\u00a0]: Copied! <pre>bl.muw(p=p_range,t=t,s=s,method=['russel', 'van_wingen','meehan','brill_beggs'])\n</pre> bl.muw(p=p_range,t=t,s=s,method=['russel', 'van_wingen','meehan','brill_beggs']) In\u00a0[\u00a0]: Copied! <pre>pd.MultiIndex.from_arrays([p_range, np.full(p_range.shape,t)], names=('number', 'color'))\n</pre> pd.MultiIndex.from_arrays([p_range, np.full(p_range.shape,t)], names=('number', 'color')) In\u00a0[\u00a0]: Copied! <pre>bl.rhow(p=p, s=s)\n</pre> bl.rhow(p=p, s=s) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/old_examples/Water_pvt/#make-a-water-object","title":"Make a water object\u00b6","text":"<p>First create an instance of water object with all the necessary attributes</p>"},{"location":"examples/old_examples/gas_pvt/","title":"Create a chromatography composition","text":"In\u00a0[1]: Copied! <pre>import os\npath = os.path.abspath(os.path.join('..','..'))\nimport sys\nsys.path.append(path)\nfrom reservoirpy.pvtpy import black_oil as bl\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n</pre> import os path = os.path.abspath(os.path.join('..','..')) import sys sys.path.append(path) from reservoirpy.pvtpy import black_oil as bl import pandas as pd import numpy as np import matplotlib.pyplot as plt import pandas as pd In\u00a0[2]: Copied! <pre>composition = {\n    'mole_fraction':[0.02,0.01,0.85,0.04,0.03,0.03,0.02]\n    }\n\n\nx=bl.chromatography(composition, compound=['carbon-dioxide','nitrogen','methane','ethane','propane','isobutane','n-butane'])\n</pre> composition = {     'mole_fraction':[0.02,0.01,0.85,0.04,0.03,0.03,0.02]     }   x=bl.chromatography(composition, compound=['carbon-dioxide','nitrogen','methane','ethane','propane','isobutane','n-butane']) In\u00a0[3]: Copied! <pre>x\n</pre> x Out[3]: mole_fraction formula mw ppc tpc compound carbon-dioxide 0.02 CO2 44.0100 1071.0 87.91 nitrogen 0.01 N2 28.0134 493.1 -232.51 methane 0.85 CH4 16.0430 666.4 -116.67 ethane 0.04 C2H6 30.0700 706.5 89.92 propane 0.03 C3H8 44.0970 616.0 206.06 isobutane 0.03 C4H10 58.1230 527.9 274.46 n-butane 0.02 C4H10 58.1230 550.6 305.62 In\u00a0[4]: Copied! <pre>x.ma\n</pre> x.ma Out[4]: <pre>20.228744</pre> In\u00a0[5]: Copied! <pre>x.gas_sg\n</pre> x.gas_sg Out[5]: <pre>0.6985063535911602</pre> In\u00a0[6]: Copied! <pre>x.get_pseudo_critical_properties()\n</pre> x.get_pseudo_critical_properties() Out[6]: <pre>{'ppc': array([695.6353554]), 'tpc': array([-78.93109373])}</pre> In\u00a0[7]: Copied! <pre>x.get_pseudo_critical_properties(correct=False)\n</pre> x.get_pseudo_critical_properties(correct=False) Out[7]: <pre>{'ppc': 666.3799999999999, 'tpc': -75.61160000000001}</pre> In\u00a0[8]: Copied! <pre>x.get_pseudo_critical_properties(correct_method='carr_kobayashi_burrows')\n</pre> x.get_pseudo_critical_properties(correct_method='carr_kobayashi_burrows') Out[8]: <pre>{'ppc': array([673.48]), 'tpc': array([-79.7116])}</pre> In\u00a0[9]: Copied! <pre>x.get_z(p=3000, t=180)\n</pre> x.get_z(p=3000, t=180) Out[9]: z pressure 3000 0.873299 In\u00a0[10]: Copied! <pre>p_range = np.linspace(1000,5000,10)\nx.get_z(p=p_range, t=180)\n</pre> p_range = np.linspace(1000,5000,10) x.get_z(p=p_range, t=180) Out[10]: z pressure 1000.000000 0.940261 1444.444444 0.919329 1888.888889 0.901855 2333.333333 0.887839 2777.777778 0.877281 3222.222222 0.870181 3666.666667 0.866539 4111.111111 0.866355 4555.555556 0.869629 5000.000000 0.876361 In\u00a0[11]: Copied! <pre>x.get_rhog(p=3000,t=180)\n</pre> x.get_rhog(p=3000,t=180) Out[11]: rhog pressure 3000 10.11923 In\u00a0[12]: Copied! <pre>x.get_rhog(p=3000,t=180, rhog_method='ideal_gas')\n</pre> x.get_rhog(p=3000,t=180, rhog_method='ideal_gas') Out[12]: rhog pressure 3000 8.837114 In\u00a0[13]: Copied! <pre>x.get_rhog(p=np.linspace(1000,5000,10),t=180,rhog_method='real_gas')\n</pre> x.get_rhog(p=np.linspace(1000,5000,10),t=180,rhog_method='real_gas') Out[13]: rhog pressure 1000.000000 3.132860 1444.444444 4.628275 1888.888889 6.169627 2333.333333 7.741617 2777.777778 9.327126 3222.222222 10.907744 3666.666667 12.464429 4111.111111 13.978238 4555.555556 15.431087 5000.000000 16.806461 In\u00a0[14]: Copied! <pre>x.get_sv(p=3000,t=180, rhog_method='ideal_gas')\n</pre> x.get_sv(p=3000,t=180, rhog_method='ideal_gas') Out[14]: sv pressure 3000 0.113159 In\u00a0[15]: Copied! <pre>x.get_sv(p=3000,t=180, rhog_method='real_gas')\n</pre> x.get_sv(p=3000,t=180, rhog_method='real_gas') Out[15]: sv pressure 3000 0.098822 In\u00a0[16]: Copied! <pre>fm = 'formation_1'\nt= 210\nchrom = x\ng = bl.gas(formation=fm, temp=t, chromatography=chrom)\n</pre> fm = 'formation_1' t= 210 chrom = x g = bl.gas(formation=fm, temp=t, chromatography=chrom)  In\u00a0[17]: Copied! <pre>g.pseudo_critical_properties()\n</pre> g.pseudo_critical_properties() Out[17]: <pre>{'ppc': array([695.6353554]), 'tpc': array([-78.93109373])}</pre> In\u00a0[18]: Copied! <pre>g.pvt_from_correlations()\n</pre> g.pvt_from_correlations() In\u00a0[19]: Copied! <pre>g.pvt\n</pre> g.pvt Out[19]: z rhog bg mug cg pressure 20.000000 0.998856 0.056341 0.168312 0.013464 0.050000 282.105263 0.984428 0.806347 0.011760 0.013644 0.003545 544.210526 0.971036 1.576979 0.006013 0.013926 0.001838 806.315789 0.958682 2.366601 0.004007 0.014283 0.001240 1068.421053 0.947365 3.173362 0.002988 0.014707 0.000936 1330.526316 0.937085 3.995202 0.002374 0.015197 0.000752 1592.631579 0.927843 4.829868 0.001963 0.015752 0.000628 1854.736842 0.919638 5.674920 0.001671 0.016374 0.000539 2116.842105 0.912470 6.527758 0.001453 0.017064 0.000472 2378.947368 0.906340 7.385637 0.001284 0.017824 0.000420 2641.052632 0.901247 8.245699 0.001150 0.018655 0.000379 2903.157895 0.897192 9.104997 0.001041 0.019559 0.000344 3165.263158 0.894173 9.960530 0.000952 0.020537 0.000316 3427.368421 0.892192 10.809276 0.000877 0.021588 0.000292 3689.473684 0.891249 11.648227 0.000814 0.022712 0.000271 3951.578947 0.891343 12.474421 0.000760 0.023907 0.000253 4213.684211 0.892474 13.284982 0.000714 0.025173 0.000237 4475.789474 0.894642 14.077150 0.000674 0.026503 0.000223 4737.894737 0.897848 14.848313 0.000639 0.027895 0.000211 5000.000000 0.902091 15.596034 0.000608 0.029342 0.000200 In\u00a0[20]: Copied! <pre>## Gas without chromatography\n</pre> ## Gas without chromatography In\u00a0[21]: Copied! <pre>gas_t = bl.gas(formation=fm, temp=t, sg=0.68)\n</pre> gas_t = bl.gas(formation=fm, temp=t, sg=0.68) In\u00a0[22]: Copied! <pre>gas_t.pvt_from_correlations()\n</pre> gas_t.pvt_from_correlations() In\u00a0[23]: Copied! <pre>gas_t.pvt\n</pre> gas_t.pvt Out[23]: z rhog bg mug cg pressure 20.000000 0.998804 0.054851 0.168303 0.013558 0.050000 282.105263 0.983725 0.785544 0.011752 0.013732 0.003545 544.210526 0.969752 1.537232 0.006005 0.014006 0.001838 806.315789 0.956884 2.308230 0.003999 0.014351 0.001240 1068.421053 0.945121 3.096620 0.002981 0.014762 0.000936 1330.526316 0.934464 3.900262 0.002367 0.015236 0.000752 1592.631579 0.924913 4.716801 0.001957 0.015774 0.000628 1854.736842 0.916467 5.543686 0.001665 0.016376 0.000539 2116.842105 0.909126 6.378188 0.001447 0.017044 0.000472 2378.947368 0.902891 7.217427 0.001279 0.017778 0.000420 2641.052632 0.897762 8.058403 0.001146 0.018579 0.000379 2903.157895 0.893738 8.898023 0.001037 0.019449 0.000344 3165.263158 0.890819 9.733145 0.000948 0.020386 0.000316 3427.368421 0.889006 10.560609 0.000874 0.021392 0.000292 3689.473684 0.888299 11.377277 0.000811 0.022463 0.000271 3951.578947 0.888697 12.180076 0.000758 0.023599 0.000253 4213.684211 0.890200 12.966035 0.000712 0.024796 0.000237 4475.789474 0.892809 13.732319 0.000672 0.026049 0.000223 4737.894737 0.896524 14.476264 0.000638 0.027352 0.000211 5000.000000 0.901344 15.195410 0.000608 0.028700 0.000200 In\u00a0[24]: Copied! <pre>gas_t.pvt.interpolate(4000)\n</pre> gas_t.pvt.interpolate(4000) Out[24]: z rhog bg mug cg pressure 4000 0.888975 12.325274 0.000749 0.02382 0.00025 In\u00a0[25]: Copied! <pre>gas_t.pvt.interpolate(np.linspace(40,3000,10))\n</pre> gas_t.pvt.interpolate(np.linspace(40,3000,10)) Out[25]: z rhog bg mug cg pressure 40.000000 0.997653 0.110606 0.156358 0.013572 0.046455 368.888889 0.979098 1.034429 0.009849 0.013823 0.002980 697.777778 0.962212 1.988959 0.004830 0.014208 0.001488 1026.666667 0.946995 2.971027 0.003143 0.014696 0.000984 1355.555556 0.933552 3.978236 0.002328 0.015288 0.000740 1684.444444 0.921954 5.006451 0.001855 0.015985 0.000597 2013.333333 0.912025 6.048632 0.001533 0.016780 0.000499 2342.222222 0.903765 7.099836 0.001303 0.017675 0.000428 2671.111111 0.897300 8.154691 0.001133 0.018679 0.000375 3000.000000 0.892659 9.206583 0.001005 0.019795 0.000334 In\u00a0[26]: Copied! <pre>from reservoirpy.wellproductivitypy import pi\n</pre> from reservoirpy.wellproductivitypy import pi In\u00a0[27]: Copied! <pre>dt = gas_t.pvt.copy()\n\ndt['ps'] = (2*dt.index) / (dt['z']*dt['mug'])\ndt.plot(y='ps')\n</pre> dt = gas_t.pvt.copy()  dt['ps'] = (2*dt.index) / (dt['z']*dt['mug']) dt.plot(y='ps') Out[27]: <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2d0f0304940&gt;</pre> In\u00a0[28]: Copied! <pre>df,aof = pi.gas_inflow_curve(2000,6.4e-4,gas_t.pvt)\n\nplt.plot(df['q'],df['p'])\n</pre> df,aof = pi.gas_inflow_curve(2000,6.4e-4,gas_t.pvt)  plt.plot(df['q'],df['p']) Out[28]: <pre>[&lt;matplotlib.lines.Line2D at 0x2d0f0aabcd0&gt;]</pre> In\u00a0[29]: Copied! <pre># Example takek\n</pre> # Example takek In\u00a0[30]: Copied! <pre>pvt_data = np.array([\n[0, 0.01270, 1.000],\n[400, 0.01286, 0.937],\n[1200, 0.01530, 0.832],\n[1600, 0.01680, 0.794],\n[2000, 0.01840,0.770],\n[3200, 0.02340, 0.797],\n[3600, 0.02500,0.827],\n[4000, 0.02660, 0.860]\n])\n\npvt_pi=bl.pvt(pvt_data, columns=['pressure','mug','z'])\npvt_pi\n</pre> pvt_data = np.array([ [0, 0.01270, 1.000], [400, 0.01286, 0.937], [1200, 0.01530, 0.832], [1600, 0.01680, 0.794], [2000, 0.01840,0.770], [3200, 0.02340, 0.797], [3600, 0.02500,0.827], [4000, 0.02660, 0.860] ])  pvt_pi=bl.pvt(pvt_data, columns=['pressure','mug','z']) pvt_pi Out[30]: mug z pressure 0.0 0.01270 1.000 400.0 0.01286 0.937 1200.0 0.01530 0.832 1600.0 0.01680 0.794 2000.0 0.01840 0.770 3200.0 0.02340 0.797 3600.0 0.02500 0.827 4000.0 0.02660 0.860 In\u00a0[64]: Copied! <pre>j_gas = pi.gas_j(h=6,k=100,re=1000,rw=0.75,temp=122,s=0)\n\nprint(f\"J Gas: {j_gas}\")\n\ndf,aof = pi.gas_inflow_curve(1000,3e-5,pvt_pi,n=10)\n\nplt.plot(df['q'],df['p'])\nplt.grid()\n</pre> j_gas = pi.gas_j(h=6,k=100,re=1000,rw=0.75,temp=122,s=0)  print(f\"J Gas: {j_gas}\")  df,aof = pi.gas_inflow_curve(1000,3e-5,pvt_pi,n=10)  plt.plot(df['q'],df['p']) plt.grid() <pre>J Gas: 0.00011248025127012314\n</pre> In\u00a0[57]: Copied! <pre>df\n</pre> df Out[57]: p q 0 0.000000 19417.584183 1 111.111111 19417.584183 2 222.222222 19180.705678 3 333.333333 18463.154989 4 444.444444 17250.700873 5 555.555556 15538.488375 6 666.666667 13344.662691 7 777.777778 10688.323716 8 888.888889 7575.664030 9 1000.000000 4011.632939 In\u00a0[33]: Copied! <pre>\n</pre> Out[33]: z rhog bg mug cg ps pressure 20.000000 0.998804 0.054851 0.168303 0.013558 0.050000 2953.735079 282.105263 0.983725 0.785544 0.011752 0.013732 0.003545 41765.544338 544.210526 0.969752 1.537232 0.006005 0.014006 0.001838 80137.648026 806.315789 0.956884 2.308230 0.003999 0.014351 0.001240 117435.679672 1068.421053 0.945121 3.096620 0.002981 0.014762 0.000936 153161.302871 1330.526316 0.934464 3.900262 0.002367 0.015236 0.000752 186902.035887 1592.631579 0.924913 4.716801 0.001957 0.015774 0.000628 218321.818085 1854.736842 0.916467 5.543686 0.001665 0.016376 0.000539 247159.510197 2116.842105 0.909126 6.378188 0.001447 0.017044 0.000472 273228.679812 2378.947368 0.902891 7.217427 0.001279 0.017778 0.000420 296416.430081 2641.052632 0.897762 8.058403 0.001146 0.018579 0.000379 316680.430684 2903.157895 0.893738 8.898023 0.001037 0.019449 0.000344 334043.942757 3165.263158 0.890819 9.733145 0.000948 0.020386 0.000316 348588.984989 3427.368421 0.889006 10.560609 0.000874 0.021392 0.000292 360448.004494 3689.473684 0.888299 11.377277 0.000811 0.022463 0.000271 369794.538813 3951.578947 0.888697 12.180076 0.000758 0.023599 0.000253 376833.403964 4213.684211 0.890200 12.966035 0.000712 0.024796 0.000237 381790.931243 4475.789474 0.892809 13.732319 0.000672 0.026049 0.000223 384905.716231 4737.894737 0.896524 14.476264 0.000638 0.027352 0.000211 386420.251892 5000.000000 0.901344 15.195410 0.000608 0.028700 0.000200 386573.708955 In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/old_examples/gas_pvt/#create-a-chromatography-composition","title":"Create a chromatography composition\u00b6","text":""},{"location":"examples/old_examples/gas_pvt/#estimate-some-properties","title":"Estimate some properties\u00b6","text":""},{"location":"examples/old_examples/gas_pvt/#apparent-molecular-weigt","title":"Apparent Molecular Weigt\u00b6","text":"<p>The apparent Molecular Weight (ma) is calculated by summing the product of molar fraction and molecular weight of each component in the chromatography</p>"},{"location":"examples/old_examples/gas_pvt/#gas-specific-gravity","title":"Gas specific gravity\u00b6","text":"<p>The Gas specific gravity is calculated by diving the ma by the specific gravity of the air</p>"},{"location":"examples/old_examples/gas_pvt/#pseudo-critical-properties","title":"Pseudo critical properties\u00b6","text":"<p>The Pseudo critical properties are calulated by summing the product of mole fraction and critical properties (pressure and temperature). By default it corrects the properties by Non-hydrocarbon components with the wichert-aziz correlation.</p>"},{"location":"examples/old_examples/gas_pvt/#get-the-compressibility-factor-of-gas","title":"Get the compressibility factor of gas\u00b6","text":"<p>Estimate the compressibility factor by estimating the critical properties and applying the default correlation method papay</p>"},{"location":"examples/old_examples/gas_pvt/#get-the-gas-density-in-lbft3","title":"Get the gas density in lb/ft3\u00b6","text":"<p>Estimate the gas density by estimating the ma, the z factor and finnaly applying the gas equation of state for real gases</p>"},{"location":"examples/old_examples/gas_pvt/#estimate-the-specific-volume-of-gas","title":"Estimate the Specific volume of Gas.\u00b6","text":"<p>Get the specific volume by estimate the inverse of the density</p>"},{"location":"examples/old_examples/gas_pvt/#create-the-gas-object","title":"Create the Gas object\u00b6","text":""},{"location":"examples/old_examples/oil_pvt-0cea1e4b-e066-4fa7-a7ca-c036bd8497e6/","title":"Oil pvt 0cea1e4b e066 4fa7 a7ca c036bd8497e6","text":""},{"location":"examples/old_examples/oil_pvt/","title":"Make a Oil object","text":"In\u00a0[1]: Copied! <pre>import os\npath = os.path.abspath(os.path.join('..','..'))\nimport sys\nsys.path.append(path)\nfrom reservoirpy.pvtpy import black_oil as bl\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n</pre> import os path = os.path.abspath(os.path.join('..','..')) import sys sys.path.append(path) from reservoirpy.pvtpy import black_oil as bl import pandas as pd import numpy as np import matplotlib.pyplot as plt import pandas as pd In\u00a0[2]: Copied! <pre>oil1 = bl.oil(formation='mir',api=31,rsb=675,sg_gas=0.95,temp=180)\n</pre> oil1 = bl.oil(formation='mir',api=31,rsb=675,sg_gas=0.95,temp=180) In\u00a0[3]: Copied! <pre>oil1.correlations\n</pre> oil1.correlations Out[3]: <pre>{'pb': 'standing',\n 'rs': 'standing',\n 'bo': 'standing',\n 'co': {'above_pb': 'vazquez_beggs', 'below_pb': 'mccain'},\n 'muod': 'beal',\n 'muo': {'above_pb': 'beal', 'below_pb': 'beggs'},\n 'rho': 'banzer'}</pre> <p>By calling the <code>pvt_from_correlation</code> method, a pvt table is constructed with the correlations above.</p> In\u00a0[4]: Copied! <pre>oil1.pvt_from_correlations()\n</pre> oil1.pvt_from_correlations() Out[4]: rs bo co muo rhoo pressure 20.000000 68.070283 1.086794 0.021527 1.809462 50.677969 282.105263 202.271361 1.152460 0.000464 1.175854 49.121421 544.210526 272.920883 1.188878 0.000179 1.010038 48.277638 806.315789 332.079469 1.220202 0.000101 0.908811 47.567999 1068.421053 386.767501 1.249771 0.000067 0.834881 46.913187 1330.526316 439.540115 1.278819 0.000049 0.776254 46.284704 1592.631579 491.619165 1.307948 0.000038 0.727551 45.669386 1854.736842 543.678232 1.337498 0.000030 0.685880 45.060419 2116.842105 596.122570 1.367680 0.000025 0.649501 44.454098 2378.947368 649.210585 1.398633 0.000021 0.617276 43.848414 2641.052632 675.000000 1.413809 0.000016 0.615733 43.601482 2903.157895 675.000000 1.413809 0.000015 0.626141 43.440942 3165.263158 675.000000 1.413809 0.000014 0.636550 43.307442 3427.368421 675.000000 1.413809 0.000013 0.646959 43.194682 3689.473684 675.000000 1.413809 0.000012 0.657368 43.098177 3951.578947 675.000000 1.413809 0.000011 0.667777 43.014649 4213.684211 675.000000 1.413809 0.000010 0.678185 42.941645 4475.789474 675.000000 1.413809 0.000010 0.688594 42.877295 4737.894737 675.000000 1.413809 0.000009 0.699003 42.820145 5000.000000 675.000000 1.413809 0.000009 0.709412 42.769052 In\u00a0[5]: Copied! <pre>oil1.pvt\n</pre> oil1.pvt Out[5]: rs bo co muo rhoo pressure 20.000000 68.070283 1.086794 0.021527 1.809462 50.677969 282.105263 202.271361 1.152460 0.000464 1.175854 49.121421 544.210526 272.920883 1.188878 0.000179 1.010038 48.277638 806.315789 332.079469 1.220202 0.000101 0.908811 47.567999 1068.421053 386.767501 1.249771 0.000067 0.834881 46.913187 1330.526316 439.540115 1.278819 0.000049 0.776254 46.284704 1592.631579 491.619165 1.307948 0.000038 0.727551 45.669386 1854.736842 543.678232 1.337498 0.000030 0.685880 45.060419 2116.842105 596.122570 1.367680 0.000025 0.649501 44.454098 2378.947368 649.210585 1.398633 0.000021 0.617276 43.848414 2641.052632 675.000000 1.413809 0.000016 0.615733 43.601482 2903.157895 675.000000 1.413809 0.000015 0.626141 43.440942 3165.263158 675.000000 1.413809 0.000014 0.636550 43.307442 3427.368421 675.000000 1.413809 0.000013 0.646959 43.194682 3689.473684 675.000000 1.413809 0.000012 0.657368 43.098177 3951.578947 675.000000 1.413809 0.000011 0.667777 43.014649 4213.684211 675.000000 1.413809 0.000010 0.678185 42.941645 4475.789474 675.000000 1.413809 0.000010 0.688594 42.877295 4737.894737 675.000000 1.413809 0.000009 0.699003 42.820145 5000.000000 675.000000 1.413809 0.000009 0.709412 42.769052 In\u00a0[6]: Copied! <pre>oil1.correlations['bo'] = 'vazquez_beggs'\noil1.correlations\n</pre> oil1.correlations['bo'] = 'vazquez_beggs' oil1.correlations Out[6]: <pre>{'pb': 'standing',\n 'rs': 'standing',\n 'bo': 'vazquez_beggs',\n 'co': {'above_pb': 'vazquez_beggs', 'below_pb': 'mccain'},\n 'muod': 'beal',\n 'muo': {'above_pb': 'beal', 'below_pb': 'beggs'},\n 'rho': 'banzer'}</pre> In\u00a0[7]: Copied! <pre>oil1.pvt_from_correlations(start_pressure=750, end_pressure=4200, n=10)\n</pre> oil1.pvt_from_correlations(start_pressure=750, end_pressure=4200, n=10) Out[7]: rs bo co muo rhoo pressure 750.000000 162.352140 1.132409 0.000111 1.303815 49.593235 1133.333333 263.406691 1.183908 0.000061 1.029021 48.391651 1516.666667 371.669716 1.241552 0.000040 0.853772 47.093691 1900.000000 485.641687 1.304582 0.000029 0.732751 45.739720 2283.333333 604.385741 1.372472 0.000022 0.644205 44.359273 2666.666667 674.929091 1.413767 0.000016 0.626102 43.756532 3050.000000 674.929091 1.413767 0.000014 0.641520 43.534577 3433.333333 674.929091 1.413767 0.000013 0.656939 43.362962 3816.666667 674.929091 1.413767 0.000011 0.672358 43.226306 4200.000000 674.929091 1.413767 0.000010 0.687776 43.114915 In\u00a0[8]: Copied! <pre>type(oil1.pvt)\n</pre> type(oil1.pvt) Out[8]: <pre>reservoirpy.pvtpy.black_oil.pvt.pvt</pre> In\u00a0[9]: Copied! <pre>oil1.pvt.interpolate([3300,2500],['muo','rs'])\n</pre> oil1.pvt.interpolate([3300,2500],['muo','rs']) Out[9]: muo rs pressure 3300 0.651576 674.929091 2500 0.633973 644.258069 In\u00a0[10]: Copied! <pre>oil1.pvt.interpolate([2140,3300],['rs','muo'])\n</pre> oil1.pvt.interpolate([2140,3300],['rs','muo']) Out[10]: rs muo pressure 2140 559.985790 0.677314 3300 674.929091 0.651576 In\u00a0[11]: Copied! <pre>oil1.pvt.interpolate([2140,3300])\n</pre> oil1.pvt.interpolate([2140,3300]) Out[11]: rs bo co muo rhoo pressure 2140 559.985790 1.347087 0.000025 0.677314 44.875440 3300 674.929091 1.413767 0.000013 0.651576 43.422654 In\u00a0[12]: Copied! <pre>d = {'pressure':[0,100,200,300,400,500,704],'rs':[0,20,30,50,60,100,120]}\np = bl.pvt(d)\nprint(type(p))\n</pre> d = {'pressure':[0,100,200,300,400,500,704],'rs':[0,20,30,50,60,100,120]} p = bl.pvt(d) print(type(p)) <pre>&lt;class 'reservoirpy.pvtpy.black_oil.pvt.pvt'&gt;\n</pre> In\u00a0[13]: Copied! <pre>p\n</pre> p Out[13]: rs pressure 0 0 100 20 200 30 300 50 400 60 500 100 704 120 In\u00a0[14]: Copied! <pre>d = {'pressure':[0,100,200,300,400,500,704],'rs':[0,20,30,50,60,100,120]}\np = bl.pvt(d)\np.plot()\n</pre> d = {'pressure':[0,100,200,300,400,500,704],'rs':[0,20,30,50,60,100,120]} p = bl.pvt(d) p.plot() Out[14]: <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7f51cc62fa50&gt;</pre> In\u00a0[15]: Copied! <pre>rs=675\napi=31\nsg_gas=0.95\ntemp = 180\ny_co2 = 0.2\ny_h2s = 0.1\npb = 1800\np = 2000\nbg = 0.00123 #by/pcn\n</pre> rs=675 api=31 sg_gas=0.95 temp = 180 y_co2 = 0.2 y_h2s = 0.1 pb = 1800 p = 2000 bg = 0.00123 #by/pcn In\u00a0[16]: Copied! <pre>pb_cor = bl.pb(rs=rs,\n               temp=temp,\n               sg_gas=sg_gas,\n               api=api,\n               y_co2=y_co2,\n               y_h2s=y_h2s,\n               multiple=False,\n               correction=True,\n               method='standing')\npb_cor\n</pre> pb_cor = bl.pb(rs=rs,                temp=temp,                sg_gas=sg_gas,                api=api,                y_co2=y_co2,                y_h2s=y_h2s,                multiple=False,                correction=True,                method='standing') pb_cor Out[16]: pb temp 180 2174.376878 In\u00a0[17]: Copied! <pre>rs_cor=bl.rs(p=p,\n             temp=temp,\n             sg_gas=sg_gas,\n             api=api,\n             pb=pb,\n             multiple=True,\n             method=['standing','laster','glaso','vazquez_beggs'])\nrs_cor\n</pre> rs_cor=bl.rs(p=p,              temp=temp,              sg_gas=sg_gas,              api=api,              pb=pb,              multiple=True,              method=['standing','laster','glaso','vazquez_beggs']) rs_cor Out[17]: rs_standing rs_laster rs_vazquez_begss rs_glaso pressure 2000 455.418283 412.321256 394.065045 384.848898 In\u00a0[18]: Copied! <pre>_p = np.linspace(264,5000,50)\nrs_cor=bl.rs(p=_p,\n             temp=temp,\n             sg_gas=sg_gas,\n             api=api,\n             pb=pb, \n             rsb=450,\n             multiple=False,\n             methods='standing')\nrs_cor.plot()\n</pre> _p = np.linspace(264,5000,50) rs_cor=bl.rs(p=_p,              temp=temp,              sg_gas=sg_gas,              api=api,              pb=pb,               rsb=450,              multiple=False,              methods='standing') rs_cor.plot() Out[18]: <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7f51cc00fb10&gt;</pre> In\u00a0[19]: Copied! <pre>bo_cor=bl.bo(p=_p,\n             rs=rs_cor['rs'].values,\n             temp=temp,\n             sg_gas=sg_gas,\n             api=api,\n             pb=pb,\n             multiple=False,\n             method='glaso')\nbo_cor.plot()\n</pre> bo_cor=bl.bo(p=_p,              rs=rs_cor['rs'].values,              temp=temp,              sg_gas=sg_gas,              api=api,              pb=pb,              multiple=False,              method='glaso') bo_cor.plot() Out[19]: <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7f51cbfa7bd0&gt;</pre> In\u00a0[22]: Copied! <pre>co_cor=bl.co(p=_p, \n             rs=rs_cor['rs'].values, \n             temp=temp, \n             pb=pb, \n             sg_gas=sg_gas, \n             api=api,\n             bo=bo_cor['bo'],\n             bg=np.full(_p.shape,bg), \n             method_above_pb='petrosky', \n             method_below_pb='mccain')\nco_cor.plot()\n</pre> co_cor=bl.co(p=_p,               rs=rs_cor['rs'].values,               temp=temp,               pb=pb,               sg_gas=sg_gas,               api=api,              bo=bo_cor['bo'],              bg=np.full(_p.shape,bg),               method_above_pb='petrosky',               method_below_pb='mccain') co_cor.plot() Out[22]: <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7f521c24ae50&gt;</pre> In\u00a0[23]: Copied! <pre>help(bl.co)\n</pre> help(bl.co) <pre>Help on function co in module reservoirpy.pvtpy.black_oil.correlations:\n\nco(p=None, rs=None, pb=None, temp=None, sg_gas=None, api=None, bo=None, method_above_pb='vazquez_beggs', method_below_pb='mccain', **kwargs)\n    Estimate the Oil compresibility in 1/psi\n    \n    Input: \n        p -&gt; (int,float,list,np.array) Interest Pressure [psi]\n        rs -&gt; (int,float,np.array) Gas Oil Ratio scf/bbl\n        pb -&gt; (int,float,np.array) Bubble Point [psi]\n        temp -&gt;  (int,float,np.array) Temperature [F]\n        sg_gas -&gt; (int,float,np.array) Gas specifi gravity\n        api -&gt; (int,float,np.array) Oil API gravity [API]\n        bo -&gt; (list,np.array) Oil Volumetric factor\n        bg -&gt; (list,np.array) Gas Volumetric factor\n        method_above_pb -&gt; (list, default 'vazquez_beggs') method to use above the bubble point\n                            ['vazquez_beggs','petrosky','kartoatmodjo']\n        method_below_pb -&gt; (list, default 'mccain') method to use below the bubble point\n                            ['mccain']\n    Return:\n        rho -&gt; (pd.DataFrame) Oil Density indexed by pressure\n    \n    Source: Correlaciones Numericas PVT - Carlos Banzer\n\n</pre> In\u00a0[24]: Copied! <pre>rho_cor=bl.rho_oil(p=_p,\n                   co=co_cor['co'].values,\n                   bo=bo_cor['bo'].values,\n                   rs=rs_cor['rs'].values,\n                   api=api,\n                   pb=pb)\nrho_cor.plot()\n</pre> rho_cor=bl.rho_oil(p=_p,                    co=co_cor['co'].values,                    bo=bo_cor['bo'].values,                    rs=rs_cor['rs'].values,                    api=api,                    pb=pb) rho_cor.plot() Out[24]: <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7f51cba5b8d0&gt;</pre> In\u00a0[25]: Copied! <pre>_muod = bl.muod(temp=temp,api=api, method=['beal','beggs','glaso'])\n_muod\n</pre> _muod = bl.muod(temp=temp,api=api, method=['beal','beggs','glaso']) _muod Out[25]: muod_beal muod_beggs muod_glaso temp 180 2.654527 3.035358 2.75824 In\u00a0[26]: Copied! <pre>muo_cor=bl.muo(p=_p,\n    rs=rs_cor['rs'].values,\n    temp=temp,\n    api=api,\n    pb=pb,\n    method_below_pb='beggs',\n    method_above_pb='beal',\n    method_dead = 'beal'\n    )\n\nmuo_cor.plot()\n</pre> muo_cor=bl.muo(p=_p,     rs=rs_cor['rs'].values,     temp=temp,     api=api,     pb=pb,     method_below_pb='beggs',     method_above_pb='beal',     method_dead = 'beal'     )  muo_cor.plot() Out[26]: <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7f51cb9c21d0&gt;</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[27]: Copied! <pre>h=None\ng=type(h)\nisinstance(h,type(None))\n</pre> h=None g=type(h) isinstance(h,type(None)) Out[27]: <pre>True</pre> In\u00a0[28]: Copied! <pre>g\n</pre> g Out[28]: <pre>NoneType</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/old_examples/oil_pvt/#make-a-oil-object","title":"Make a Oil object\u00b6","text":"<p>First create an instance of oil object with all the necessary attributes</p>"},{"location":"examples/old_examples/oil_pvt/#make-pvt-table-from-correlations","title":"Make pvt table from correlations\u00b6","text":"<p>By default, there are built-in some correlations to build a black oil pvt</p>"},{"location":"examples/old_examples/oil_pvt/#different-correlations-and-pressure-range","title":"Different correlations and pressure range\u00b6","text":"<p>If you like to use different correlation and a different pressure range you can explicitly set</p>"},{"location":"examples/old_examples/oil_pvt/#pvt-class","title":"PVT Class\u00b6","text":"<p>If you have already a PVT table you can incorporate to a oil class.</p> <p><code>oil_pvt</code> object is a subclass of <code>pandas.DataFrame</code> in which you can upload a table with the <code>pressure</code> column to make inperpolation.</p> <p>In the case you use the <code>pvt_from_correlations</code> method, it is actually a <code>oil_pvt</code> class</p>"},{"location":"examples/old_examples/oil_pvt/#make-a-pvt-table","title":"Make a pvt table\u00b6","text":""}]}